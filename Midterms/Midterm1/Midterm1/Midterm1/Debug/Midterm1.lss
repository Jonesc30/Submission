
Midterm1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000be  00800100  000006e0  00000774  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  008001be  008001be  00000832  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000832  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000864  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  000008a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000e2f  00000000  00000000  000008f4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000a36  00000000  00000000  00001723  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004aa  00000000  00000000  00002159  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00002604  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000051f  00000000  00000000  000026e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000462  00000000  00000000  00002c03  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00003065  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 ea 00 	jmp	0x1d4	; 0x1d4 <__vector_16>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e0 ee       	ldi	r30, 0xE0	; 224
  c8:	f6 e0       	ldi	r31, 0x06	; 6
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ae 3b       	cpi	r26, 0xBE	; 190
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ae eb       	ldi	r26, 0xBE	; 190
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	af 3b       	cpi	r26, 0xBF	; 191
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
  ea:	0c 94 6e 03 	jmp	0x6dc	; 0x6dc <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <USART_init>:

unsigned char USART_receive(void)
{
	while(!(UCSR0A & (1 << RXC0)));
	return UDR0;
}
  f2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  f6:	80 e1       	ldi	r24, 0x10	; 16
  f8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  fc:	82 e0       	ldi	r24, 0x02	; 2
  fe:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
 102:	98 e1       	ldi	r25, 0x18	; 24
 104:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 108:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 10c:	08 95       	ret

0000010e <USART_transmit>:

void USART_transmit(unsigned char data) {			// Function to transmit ASCII value into UDR0
	while (!(UCSR0A & (1 << UDRE0)));			// Keep Checking until  UDRE0 data register 'High' to break loop
 10e:	e0 ec       	ldi	r30, 0xC0	; 192
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	90 81       	ld	r25, Z
 114:	95 ff       	sbrs	r25, 5
 116:	fd cf       	rjmp	.-6      	; 0x112 <USART_transmit+0x4>
	UDR0 = data;								// Store unsigned char serial data into UDR0
 118:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 11c:	08 95       	ret

0000011e <USART_putstring>:
}

void USART_putstring(char* StringPtr)
{
 11e:	cf 93       	push	r28
 120:	df 93       	push	r29
 122:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00)
 124:	88 81       	ld	r24, Y
 126:	88 23       	and	r24, r24
 128:	31 f0       	breq	.+12     	; 0x136 <USART_putstring+0x18>
 12a:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_transmit(*StringPtr);
 12c:	0e 94 87 00 	call	0x10e	; 0x10e <USART_transmit>
	UDR0 = data;								// Store unsigned char serial data into UDR0
}

void USART_putstring(char* StringPtr)
{
	while(*StringPtr != 0x00)
 130:	89 91       	ld	r24, Y+
 132:	81 11       	cpse	r24, r1
 134:	fb cf       	rjmp	.-10     	; 0x12c <USART_putstring+0xe>
	{
		USART_transmit(*StringPtr);
		StringPtr++;
	}
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <ADC_init>:

void ADC_init (void)
{
	ADMUX = (0<<REFS1)|					// reference selection bits
 13c:	84 e4       	ldi	r24, 0x44	; 68
 13e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	(1<<REFS0)|							// AVcc - external cap at AREF
	(0<<ADLAR)|							// ADC Left Adjust Result
	(1<<MUX2)|							// Analog Channel Selection Bits
	(0<<MUX1)|							// ADC4 (PC4)
	(0<<MUX0);
	ADCSRA = (1<<ADEN)|					// ADC Enable
 142:	85 e8       	ldi	r24, 0x85	; 133
 144:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 148:	08 95       	ret

0000014a <main>:

char outs[20];

int main(void)
{
	USART_init(); //initialize USART
 14a:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_init>
	ADC_init (); //initialize ADC
 14e:	0e 94 9e 00 	call	0x13c	; 0x13c <ADC_init>
	
	USART_putstring("AT\r\n");
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	91 e0       	ldi	r25, 0x01	; 1
 156:	0e 94 8f 00 	call	0x11e	; 0x11e <USART_putstring>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 15a:	2f ef       	ldi	r18, 0xFF	; 255
 15c:	89 e6       	ldi	r24, 0x69	; 105
 15e:	98 e1       	ldi	r25, 0x18	; 24
 160:	21 50       	subi	r18, 0x01	; 1
 162:	80 40       	sbci	r24, 0x00	; 0
 164:	90 40       	sbci	r25, 0x00	; 0
 166:	e1 f7       	brne	.-8      	; 0x160 <main+0x16>
 168:	00 c0       	rjmp	.+0      	; 0x16a <main+0x20>
 16a:	00 00       	nop
	_delay_ms(500);
	USART_putstring("AT+CWMODE=3\r\n");
 16c:	86 e0       	ldi	r24, 0x06	; 6
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 8f 00 	call	0x11e	; 0x11e <USART_putstring>
 174:	2f ef       	ldi	r18, 0xFF	; 255
 176:	89 e6       	ldi	r24, 0x69	; 105
 178:	98 e1       	ldi	r25, 0x18	; 24
 17a:	21 50       	subi	r18, 0x01	; 1
 17c:	80 40       	sbci	r24, 0x00	; 0
 17e:	90 40       	sbci	r25, 0x00	; 0
 180:	e1 f7       	brne	.-8      	; 0x17a <main+0x30>
 182:	00 c0       	rjmp	.+0      	; 0x184 <main+0x3a>
 184:	00 00       	nop
	_delay_ms(500);
	USART_putstring("AT+CWJAP=\"RelianceHome-CBC438_2GEXT\",\"pgafgzj5f3\"\r\n");	// Log in WiFi
 186:	84 e1       	ldi	r24, 0x14	; 20
 188:	91 e0       	ldi	r25, 0x01	; 1
 18a:	0e 94 8f 00 	call	0x11e	; 0x11e <USART_putstring>
 18e:	2f ef       	ldi	r18, 0xFF	; 255
 190:	89 e6       	ldi	r24, 0x69	; 105
 192:	98 e1       	ldi	r25, 0x18	; 24
 194:	21 50       	subi	r18, 0x01	; 1
 196:	80 40       	sbci	r24, 0x00	; 0
 198:	90 40       	sbci	r25, 0x00	; 0
 19a:	e1 f7       	brne	.-8      	; 0x194 <main+0x4a>
 19c:	00 c0       	rjmp	.+0      	; 0x19e <main+0x54>
 19e:	00 00       	nop
	//USART_putstring("AT+CWJAP=\"WIFI_NAME_HERE\",\"WIFI_PASSWORD_HERE\"");	// Log in WiFi
	_delay_ms(500);
	USART_putstring("AT+CIPMUX=0\r\n");
 1a0:	88 e4       	ldi	r24, 0x48	; 72
 1a2:	91 e0       	ldi	r25, 0x01	; 1
 1a4:	0e 94 8f 00 	call	0x11e	; 0x11e <USART_putstring>
 1a8:	2f ef       	ldi	r18, 0xFF	; 255
 1aa:	89 e6       	ldi	r24, 0x69	; 105
 1ac:	98 e1       	ldi	r25, 0x18	; 24
 1ae:	21 50       	subi	r18, 0x01	; 1
 1b0:	80 40       	sbci	r24, 0x00	; 0
 1b2:	90 40       	sbci	r25, 0x00	; 0
 1b4:	e1 f7       	brne	.-8      	; 0x1ae <main+0x64>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <main+0x6e>
 1b8:	00 00       	nop
	_delay_ms(500);
	
	TCCR0A = 0x00; //normal operation
 1ba:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1 << CS02); //set prescalar to 256
 1bc:	85 b5       	in	r24, 0x25	; 37
 1be:	84 60       	ori	r24, 0x04	; 4
 1c0:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 16; //TOP = 256-240 = 16
 1c2:	80 e1       	ldi	r24, 0x10	; 16
 1c4:	86 bd       	out	0x26, r24	; 38
	TIMSK0 |= (1 << TOIE0);
 1c6:	ee e6       	ldi	r30, 0x6E	; 110
 1c8:	f0 e0       	ldi	r31, 0x00	; 0
 1ca:	80 81       	ld	r24, Z
 1cc:	81 60       	ori	r24, 0x01	; 1
 1ce:	80 83       	st	Z, r24
	sei(); //enable interrupt
 1d0:	78 94       	sei
 1d2:	ff cf       	rjmp	.-2      	; 0x1d2 <main+0x88>

000001d4 <__vector_16>:
	(1<<ADPS0);
	
}

ISR (TIMER0_OVF_vect)
{
 1d4:	1f 92       	push	r1
 1d6:	0f 92       	push	r0
 1d8:	0f b6       	in	r0, 0x3f	; 63
 1da:	0f 92       	push	r0
 1dc:	11 24       	eor	r1, r1
 1de:	2f 93       	push	r18
 1e0:	3f 93       	push	r19
 1e2:	4f 93       	push	r20
 1e4:	5f 93       	push	r21
 1e6:	6f 93       	push	r22
 1e8:	7f 93       	push	r23
 1ea:	8f 93       	push	r24
 1ec:	9f 93       	push	r25
 1ee:	af 93       	push	r26
 1f0:	bf 93       	push	r27
 1f2:	cf 93       	push	r28
 1f4:	df 93       	push	r29
 1f6:	ef 93       	push	r30
 1f8:	ff 93       	push	r31
	OVF_COUNT++; //increment the overflow counter
 1fa:	80 91 be 01 	lds	r24, 0x01BE	; 0x8001be <__data_end>
 1fe:	8f 5f       	subi	r24, 0xFF	; 255
 200:	80 93 be 01 	sts	0x01BE, r24	; 0x8001be <__data_end>
	if (OVF_COUNT == OVF_LIMIT) //check to see if the limit was reached
 204:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <OVF_LIMIT>
 208:	89 13       	cpse	r24, r25
 20a:	88 c0       	rjmp	.+272    	; 0x31c <__vector_16+0x148>
	{
		ADCSRA|=(1<<ADSC);	//start conversion
 20c:	ea e7       	ldi	r30, 0x7A	; 122
 20e:	f0 e0       	ldi	r31, 0x00	; 0
 210:	80 81       	ld	r24, Z
 212:	80 64       	ori	r24, 0x40	; 64
 214:	80 83       	st	Z, r24
		while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
 216:	80 81       	ld	r24, Z
 218:	84 ff       	sbrs	r24, 4
 21a:	fd cf       	rjmp	.-6      	; 0x216 <__vector_16+0x42>
		
		ADCSRA |= (1<<ADIF);
 21c:	ea e7       	ldi	r30, 0x7A	; 122
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	80 81       	ld	r24, Z
 222:	80 61       	ori	r24, 0x10	; 16
 224:	80 83       	st	Z, r24

		int a = ADCL; //a is temperature
 226:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
		a = a | (ADCH<<8);
 22a:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
		a = (a/1024.0) * 5000/10;
 22e:	70 e0       	ldi	r23, 0x00	; 0
 230:	78 2b       	or	r23, r24
 232:	07 2e       	mov	r0, r23
 234:	00 0c       	add	r0, r0
 236:	88 0b       	sbc	r24, r24
 238:	99 0b       	sbc	r25, r25
 23a:	0e 94 4d 02 	call	0x49a	; 0x49a <__floatsisf>
 23e:	20 e0       	ldi	r18, 0x00	; 0
 240:	30 e0       	ldi	r19, 0x00	; 0
 242:	40 e8       	ldi	r20, 0x80	; 128
 244:	5a e3       	ldi	r21, 0x3A	; 58
 246:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__mulsf3>
 24a:	20 e0       	ldi	r18, 0x00	; 0
 24c:	30 e4       	ldi	r19, 0x40	; 64
 24e:	4c e9       	ldi	r20, 0x9C	; 156
 250:	55 e4       	ldi	r21, 0x45	; 69
 252:	0e 94 d9 02 	call	0x5b2	; 0x5b2 <__mulsf3>
 256:	20 e0       	ldi	r18, 0x00	; 0
 258:	30 e0       	ldi	r19, 0x00	; 0
 25a:	40 e2       	ldi	r20, 0x20	; 32
 25c:	51 e4       	ldi	r21, 0x41	; 65
 25e:	0e 94 a3 01 	call	0x346	; 0x346 <__divsf3>
 262:	0e 94 15 02 	call	0x42a	; 0x42a <__fixsfsi>
		a = (a*(9/5))+32; //equation to convert celsius to farenheit. can't use used 2 instead of 9/5
 266:	eb 01       	movw	r28, r22
 268:	a0 96       	adiw	r28, 0x20	; 32
		
		//snprintf(outs,sizeof(outs),"%3f\r\n", a);// Stores integer 'adc_temp' into the string 'outs'
		
		
		USART_putstring("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");	// Connect API KEy
 26a:	86 e5       	ldi	r24, 0x56	; 86
 26c:	91 e0       	ldi	r25, 0x01	; 1
 26e:	0e 94 8f 00 	call	0x11e	; 0x11e <USART_putstring>
 272:	2f ef       	ldi	r18, 0xFF	; 255
 274:	89 e6       	ldi	r24, 0x69	; 105
 276:	98 e1       	ldi	r25, 0x18	; 24
 278:	21 50       	subi	r18, 0x01	; 1
 27a:	80 40       	sbci	r24, 0x00	; 0
 27c:	90 40       	sbci	r25, 0x00	; 0
 27e:	e1 f7       	brne	.-8      	; 0x278 <__vector_16+0xa4>
 280:	00 c0       	rjmp	.+0      	; 0x282 <__vector_16+0xae>
 282:	00 00       	nop
		_delay_ms(500);
		USART_putstring("AT+CIPSEND=51\r\n");									// Send Serial Data
 284:	82 e8       	ldi	r24, 0x82	; 130
 286:	91 e0       	ldi	r25, 0x01	; 1
 288:	0e 94 8f 00 	call	0x11e	; 0x11e <USART_putstring>
 28c:	2f ef       	ldi	r18, 0xFF	; 255
 28e:	89 e6       	ldi	r24, 0x69	; 105
 290:	98 e1       	ldi	r25, 0x18	; 24
 292:	21 50       	subi	r18, 0x01	; 1
 294:	80 40       	sbci	r24, 0x00	; 0
 296:	90 40       	sbci	r25, 0x00	; 0
 298:	e1 f7       	brne	.-8      	; 0x292 <__vector_16+0xbe>
 29a:	00 c0       	rjmp	.+0      	; 0x29c <__vector_16+0xc8>
 29c:	00 00       	nop
		_delay_ms(500);
		USART_putstring("GET /update?key=8031EGDV0KJXD8IU&field1=");// Send Value
 29e:	82 e9       	ldi	r24, 0x92	; 146
 2a0:	91 e0       	ldi	r25, 0x01	; 1
 2a2:	0e 94 8f 00 	call	0x11e	; 0x11e <USART_putstring>
 2a6:	2f ef       	ldi	r18, 0xFF	; 255
 2a8:	89 e6       	ldi	r24, 0x69	; 105
 2aa:	98 e1       	ldi	r25, 0x18	; 24
 2ac:	21 50       	subi	r18, 0x01	; 1
 2ae:	80 40       	sbci	r24, 0x00	; 0
 2b0:	90 40       	sbci	r25, 0x00	; 0
 2b2:	e1 f7       	brne	.-8      	; 0x2ac <__vector_16+0xd8>
 2b4:	00 c0       	rjmp	.+0      	; 0x2b6 <__vector_16+0xe2>
 2b6:	00 00       	nop
		_delay_ms(500);
		a = a % 100;
 2b8:	ce 01       	movw	r24, r28
 2ba:	64 e6       	ldi	r22, 0x64	; 100
 2bc:	70 e0       	ldi	r23, 0x00	; 0
 2be:	0e 94 46 03 	call	0x68c	; 0x68c <__divmodhi4>
		USART_transmit((a/10)+'0');
 2c2:	6a e0       	ldi	r22, 0x0A	; 10
 2c4:	70 e0       	ldi	r23, 0x00	; 0
 2c6:	0e 94 46 03 	call	0x68c	; 0x68c <__divmodhi4>
 2ca:	c8 2f       	mov	r28, r24
 2cc:	80 e3       	ldi	r24, 0x30	; 48
 2ce:	86 0f       	add	r24, r22
 2d0:	0e 94 87 00 	call	0x10e	; 0x10e <USART_transmit>
		a = a % 10;
		USART_transmit((a)+'0');
 2d4:	80 e3       	ldi	r24, 0x30	; 48
 2d6:	8c 0f       	add	r24, r28
 2d8:	0e 94 87 00 	call	0x10e	; 0x10e <USART_transmit>
 2dc:	2f ef       	ldi	r18, 0xFF	; 255
 2de:	89 e6       	ldi	r24, 0x69	; 105
 2e0:	98 e1       	ldi	r25, 0x18	; 24
 2e2:	21 50       	subi	r18, 0x01	; 1
 2e4:	80 40       	sbci	r24, 0x00	; 0
 2e6:	90 40       	sbci	r25, 0x00	; 0
 2e8:	e1 f7       	brne	.-8      	; 0x2e2 <__vector_16+0x10e>
 2ea:	00 c0       	rjmp	.+0      	; 0x2ec <__vector_16+0x118>
 2ec:	00 00       	nop
		_delay_ms(500);
		USART_putstring(" ");
 2ee:	8b eb       	ldi	r24, 0xBB	; 187
 2f0:	91 e0       	ldi	r25, 0x01	; 1
 2f2:	0e 94 8f 00 	call	0x11e	; 0x11e <USART_putstring>
 2f6:	2f ef       	ldi	r18, 0xFF	; 255
 2f8:	89 e6       	ldi	r24, 0x69	; 105
 2fa:	98 e1       	ldi	r25, 0x18	; 24
 2fc:	21 50       	subi	r18, 0x01	; 1
 2fe:	80 40       	sbci	r24, 0x00	; 0
 300:	90 40       	sbci	r25, 0x00	; 0
 302:	e1 f7       	brne	.-8      	; 0x2fc <__vector_16+0x128>
 304:	00 c0       	rjmp	.+0      	; 0x306 <__vector_16+0x132>
 306:	00 00       	nop
		_delay_ms(500);
		USART_putstring("\r\n");
 308:	85 e4       	ldi	r24, 0x45	; 69
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	0e 94 8f 00 	call	0x11e	; 0x11e <USART_putstring>
		USART_putstring("\r\n");
 310:	85 e4       	ldi	r24, 0x45	; 69
 312:	91 e0       	ldi	r25, 0x01	; 1
 314:	0e 94 8f 00 	call	0x11e	; 0x11e <USART_putstring>
		
		OVF_COUNT = 0; //reset overflow counter
 318:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <__data_end>
	}
	TCNT0 = 16; //reset TOP
 31c:	80 e1       	ldi	r24, 0x10	; 16
 31e:	86 bd       	out	0x26, r24	; 38
}
 320:	ff 91       	pop	r31
 322:	ef 91       	pop	r30
 324:	df 91       	pop	r29
 326:	cf 91       	pop	r28
 328:	bf 91       	pop	r27
 32a:	af 91       	pop	r26
 32c:	9f 91       	pop	r25
 32e:	8f 91       	pop	r24
 330:	7f 91       	pop	r23
 332:	6f 91       	pop	r22
 334:	5f 91       	pop	r21
 336:	4f 91       	pop	r20
 338:	3f 91       	pop	r19
 33a:	2f 91       	pop	r18
 33c:	0f 90       	pop	r0
 33e:	0f be       	out	0x3f, r0	; 63
 340:	0f 90       	pop	r0
 342:	1f 90       	pop	r1
 344:	18 95       	reti

00000346 <__divsf3>:
 346:	0e 94 b7 01 	call	0x36e	; 0x36e <__divsf3x>
 34a:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__fp_round>
 34e:	0e 94 98 02 	call	0x530	; 0x530 <__fp_pscB>
 352:	58 f0       	brcs	.+22     	; 0x36a <__divsf3+0x24>
 354:	0e 94 91 02 	call	0x522	; 0x522 <__fp_pscA>
 358:	40 f0       	brcs	.+16     	; 0x36a <__divsf3+0x24>
 35a:	29 f4       	brne	.+10     	; 0x366 <__divsf3+0x20>
 35c:	5f 3f       	cpi	r21, 0xFF	; 255
 35e:	29 f0       	breq	.+10     	; 0x36a <__divsf3+0x24>
 360:	0c 94 88 02 	jmp	0x510	; 0x510 <__fp_inf>
 364:	51 11       	cpse	r21, r1
 366:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__fp_szero>
 36a:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__fp_nan>

0000036e <__divsf3x>:
 36e:	0e 94 b0 02 	call	0x560	; 0x560 <__fp_split3>
 372:	68 f3       	brcs	.-38     	; 0x34e <__divsf3+0x8>

00000374 <__divsf3_pse>:
 374:	99 23       	and	r25, r25
 376:	b1 f3       	breq	.-20     	; 0x364 <__divsf3+0x1e>
 378:	55 23       	and	r21, r21
 37a:	91 f3       	breq	.-28     	; 0x360 <__divsf3+0x1a>
 37c:	95 1b       	sub	r25, r21
 37e:	55 0b       	sbc	r21, r21
 380:	bb 27       	eor	r27, r27
 382:	aa 27       	eor	r26, r26
 384:	62 17       	cp	r22, r18
 386:	73 07       	cpc	r23, r19
 388:	84 07       	cpc	r24, r20
 38a:	38 f0       	brcs	.+14     	; 0x39a <__divsf3_pse+0x26>
 38c:	9f 5f       	subi	r25, 0xFF	; 255
 38e:	5f 4f       	sbci	r21, 0xFF	; 255
 390:	22 0f       	add	r18, r18
 392:	33 1f       	adc	r19, r19
 394:	44 1f       	adc	r20, r20
 396:	aa 1f       	adc	r26, r26
 398:	a9 f3       	breq	.-22     	; 0x384 <__divsf3_pse+0x10>
 39a:	35 d0       	rcall	.+106    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 39c:	0e 2e       	mov	r0, r30
 39e:	3a f0       	brmi	.+14     	; 0x3ae <__divsf3_pse+0x3a>
 3a0:	e0 e8       	ldi	r30, 0x80	; 128
 3a2:	32 d0       	rcall	.+100    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 3a4:	91 50       	subi	r25, 0x01	; 1
 3a6:	50 40       	sbci	r21, 0x00	; 0
 3a8:	e6 95       	lsr	r30
 3aa:	00 1c       	adc	r0, r0
 3ac:	ca f7       	brpl	.-14     	; 0x3a0 <__divsf3_pse+0x2c>
 3ae:	2b d0       	rcall	.+86     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3b0:	fe 2f       	mov	r31, r30
 3b2:	29 d0       	rcall	.+82     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3b4:	66 0f       	add	r22, r22
 3b6:	77 1f       	adc	r23, r23
 3b8:	88 1f       	adc	r24, r24
 3ba:	bb 1f       	adc	r27, r27
 3bc:	26 17       	cp	r18, r22
 3be:	37 07       	cpc	r19, r23
 3c0:	48 07       	cpc	r20, r24
 3c2:	ab 07       	cpc	r26, r27
 3c4:	b0 e8       	ldi	r27, 0x80	; 128
 3c6:	09 f0       	breq	.+2      	; 0x3ca <__divsf3_pse+0x56>
 3c8:	bb 0b       	sbc	r27, r27
 3ca:	80 2d       	mov	r24, r0
 3cc:	bf 01       	movw	r22, r30
 3ce:	ff 27       	eor	r31, r31
 3d0:	93 58       	subi	r25, 0x83	; 131
 3d2:	5f 4f       	sbci	r21, 0xFF	; 255
 3d4:	3a f0       	brmi	.+14     	; 0x3e4 <__divsf3_pse+0x70>
 3d6:	9e 3f       	cpi	r25, 0xFE	; 254
 3d8:	51 05       	cpc	r21, r1
 3da:	78 f0       	brcs	.+30     	; 0x3fa <__divsf3_pse+0x86>
 3dc:	0c 94 88 02 	jmp	0x510	; 0x510 <__fp_inf>
 3e0:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__fp_szero>
 3e4:	5f 3f       	cpi	r21, 0xFF	; 255
 3e6:	e4 f3       	brlt	.-8      	; 0x3e0 <__divsf3_pse+0x6c>
 3e8:	98 3e       	cpi	r25, 0xE8	; 232
 3ea:	d4 f3       	brlt	.-12     	; 0x3e0 <__divsf3_pse+0x6c>
 3ec:	86 95       	lsr	r24
 3ee:	77 95       	ror	r23
 3f0:	67 95       	ror	r22
 3f2:	b7 95       	ror	r27
 3f4:	f7 95       	ror	r31
 3f6:	9f 5f       	subi	r25, 0xFF	; 255
 3f8:	c9 f7       	brne	.-14     	; 0x3ec <__divsf3_pse+0x78>
 3fa:	88 0f       	add	r24, r24
 3fc:	91 1d       	adc	r25, r1
 3fe:	96 95       	lsr	r25
 400:	87 95       	ror	r24
 402:	97 f9       	bld	r25, 7
 404:	08 95       	ret
 406:	e1 e0       	ldi	r30, 0x01	; 1
 408:	66 0f       	add	r22, r22
 40a:	77 1f       	adc	r23, r23
 40c:	88 1f       	adc	r24, r24
 40e:	bb 1f       	adc	r27, r27
 410:	62 17       	cp	r22, r18
 412:	73 07       	cpc	r23, r19
 414:	84 07       	cpc	r24, r20
 416:	ba 07       	cpc	r27, r26
 418:	20 f0       	brcs	.+8      	; 0x422 <__LOCK_REGION_LENGTH__+0x22>
 41a:	62 1b       	sub	r22, r18
 41c:	73 0b       	sbc	r23, r19
 41e:	84 0b       	sbc	r24, r20
 420:	ba 0b       	sbc	r27, r26
 422:	ee 1f       	adc	r30, r30
 424:	88 f7       	brcc	.-30     	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 426:	e0 95       	com	r30
 428:	08 95       	ret

0000042a <__fixsfsi>:
 42a:	0e 94 1c 02 	call	0x438	; 0x438 <__fixunssfsi>
 42e:	68 94       	set
 430:	b1 11       	cpse	r27, r1
 432:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__fp_szero>
 436:	08 95       	ret

00000438 <__fixunssfsi>:
 438:	0e 94 b8 02 	call	0x570	; 0x570 <__fp_splitA>
 43c:	88 f0       	brcs	.+34     	; 0x460 <__fixunssfsi+0x28>
 43e:	9f 57       	subi	r25, 0x7F	; 127
 440:	98 f0       	brcs	.+38     	; 0x468 <__fixunssfsi+0x30>
 442:	b9 2f       	mov	r27, r25
 444:	99 27       	eor	r25, r25
 446:	b7 51       	subi	r27, 0x17	; 23
 448:	b0 f0       	brcs	.+44     	; 0x476 <__fixunssfsi+0x3e>
 44a:	e1 f0       	breq	.+56     	; 0x484 <__fixunssfsi+0x4c>
 44c:	66 0f       	add	r22, r22
 44e:	77 1f       	adc	r23, r23
 450:	88 1f       	adc	r24, r24
 452:	99 1f       	adc	r25, r25
 454:	1a f0       	brmi	.+6      	; 0x45c <__fixunssfsi+0x24>
 456:	ba 95       	dec	r27
 458:	c9 f7       	brne	.-14     	; 0x44c <__fixunssfsi+0x14>
 45a:	14 c0       	rjmp	.+40     	; 0x484 <__fixunssfsi+0x4c>
 45c:	b1 30       	cpi	r27, 0x01	; 1
 45e:	91 f0       	breq	.+36     	; 0x484 <__fixunssfsi+0x4c>
 460:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__fp_zero>
 464:	b1 e0       	ldi	r27, 0x01	; 1
 466:	08 95       	ret
 468:	0c 94 d2 02 	jmp	0x5a4	; 0x5a4 <__fp_zero>
 46c:	67 2f       	mov	r22, r23
 46e:	78 2f       	mov	r23, r24
 470:	88 27       	eor	r24, r24
 472:	b8 5f       	subi	r27, 0xF8	; 248
 474:	39 f0       	breq	.+14     	; 0x484 <__fixunssfsi+0x4c>
 476:	b9 3f       	cpi	r27, 0xF9	; 249
 478:	cc f3       	brlt	.-14     	; 0x46c <__fixunssfsi+0x34>
 47a:	86 95       	lsr	r24
 47c:	77 95       	ror	r23
 47e:	67 95       	ror	r22
 480:	b3 95       	inc	r27
 482:	d9 f7       	brne	.-10     	; 0x47a <__fixunssfsi+0x42>
 484:	3e f4       	brtc	.+14     	; 0x494 <__fixunssfsi+0x5c>
 486:	90 95       	com	r25
 488:	80 95       	com	r24
 48a:	70 95       	com	r23
 48c:	61 95       	neg	r22
 48e:	7f 4f       	sbci	r23, 0xFF	; 255
 490:	8f 4f       	sbci	r24, 0xFF	; 255
 492:	9f 4f       	sbci	r25, 0xFF	; 255
 494:	08 95       	ret

00000496 <__floatunsisf>:
 496:	e8 94       	clt
 498:	09 c0       	rjmp	.+18     	; 0x4ac <__floatsisf+0x12>

0000049a <__floatsisf>:
 49a:	97 fb       	bst	r25, 7
 49c:	3e f4       	brtc	.+14     	; 0x4ac <__floatsisf+0x12>
 49e:	90 95       	com	r25
 4a0:	80 95       	com	r24
 4a2:	70 95       	com	r23
 4a4:	61 95       	neg	r22
 4a6:	7f 4f       	sbci	r23, 0xFF	; 255
 4a8:	8f 4f       	sbci	r24, 0xFF	; 255
 4aa:	9f 4f       	sbci	r25, 0xFF	; 255
 4ac:	99 23       	and	r25, r25
 4ae:	a9 f0       	breq	.+42     	; 0x4da <__floatsisf+0x40>
 4b0:	f9 2f       	mov	r31, r25
 4b2:	96 e9       	ldi	r25, 0x96	; 150
 4b4:	bb 27       	eor	r27, r27
 4b6:	93 95       	inc	r25
 4b8:	f6 95       	lsr	r31
 4ba:	87 95       	ror	r24
 4bc:	77 95       	ror	r23
 4be:	67 95       	ror	r22
 4c0:	b7 95       	ror	r27
 4c2:	f1 11       	cpse	r31, r1
 4c4:	f8 cf       	rjmp	.-16     	; 0x4b6 <__floatsisf+0x1c>
 4c6:	fa f4       	brpl	.+62     	; 0x506 <__floatsisf+0x6c>
 4c8:	bb 0f       	add	r27, r27
 4ca:	11 f4       	brne	.+4      	; 0x4d0 <__floatsisf+0x36>
 4cc:	60 ff       	sbrs	r22, 0
 4ce:	1b c0       	rjmp	.+54     	; 0x506 <__floatsisf+0x6c>
 4d0:	6f 5f       	subi	r22, 0xFF	; 255
 4d2:	7f 4f       	sbci	r23, 0xFF	; 255
 4d4:	8f 4f       	sbci	r24, 0xFF	; 255
 4d6:	9f 4f       	sbci	r25, 0xFF	; 255
 4d8:	16 c0       	rjmp	.+44     	; 0x506 <__floatsisf+0x6c>
 4da:	88 23       	and	r24, r24
 4dc:	11 f0       	breq	.+4      	; 0x4e2 <__floatsisf+0x48>
 4de:	96 e9       	ldi	r25, 0x96	; 150
 4e0:	11 c0       	rjmp	.+34     	; 0x504 <__floatsisf+0x6a>
 4e2:	77 23       	and	r23, r23
 4e4:	21 f0       	breq	.+8      	; 0x4ee <__floatsisf+0x54>
 4e6:	9e e8       	ldi	r25, 0x8E	; 142
 4e8:	87 2f       	mov	r24, r23
 4ea:	76 2f       	mov	r23, r22
 4ec:	05 c0       	rjmp	.+10     	; 0x4f8 <__floatsisf+0x5e>
 4ee:	66 23       	and	r22, r22
 4f0:	71 f0       	breq	.+28     	; 0x50e <__floatsisf+0x74>
 4f2:	96 e8       	ldi	r25, 0x86	; 134
 4f4:	86 2f       	mov	r24, r22
 4f6:	70 e0       	ldi	r23, 0x00	; 0
 4f8:	60 e0       	ldi	r22, 0x00	; 0
 4fa:	2a f0       	brmi	.+10     	; 0x506 <__floatsisf+0x6c>
 4fc:	9a 95       	dec	r25
 4fe:	66 0f       	add	r22, r22
 500:	77 1f       	adc	r23, r23
 502:	88 1f       	adc	r24, r24
 504:	da f7       	brpl	.-10     	; 0x4fc <__floatsisf+0x62>
 506:	88 0f       	add	r24, r24
 508:	96 95       	lsr	r25
 50a:	87 95       	ror	r24
 50c:	97 f9       	bld	r25, 7
 50e:	08 95       	ret

00000510 <__fp_inf>:
 510:	97 f9       	bld	r25, 7
 512:	9f 67       	ori	r25, 0x7F	; 127
 514:	80 e8       	ldi	r24, 0x80	; 128
 516:	70 e0       	ldi	r23, 0x00	; 0
 518:	60 e0       	ldi	r22, 0x00	; 0
 51a:	08 95       	ret

0000051c <__fp_nan>:
 51c:	9f ef       	ldi	r25, 0xFF	; 255
 51e:	80 ec       	ldi	r24, 0xC0	; 192
 520:	08 95       	ret

00000522 <__fp_pscA>:
 522:	00 24       	eor	r0, r0
 524:	0a 94       	dec	r0
 526:	16 16       	cp	r1, r22
 528:	17 06       	cpc	r1, r23
 52a:	18 06       	cpc	r1, r24
 52c:	09 06       	cpc	r0, r25
 52e:	08 95       	ret

00000530 <__fp_pscB>:
 530:	00 24       	eor	r0, r0
 532:	0a 94       	dec	r0
 534:	12 16       	cp	r1, r18
 536:	13 06       	cpc	r1, r19
 538:	14 06       	cpc	r1, r20
 53a:	05 06       	cpc	r0, r21
 53c:	08 95       	ret

0000053e <__fp_round>:
 53e:	09 2e       	mov	r0, r25
 540:	03 94       	inc	r0
 542:	00 0c       	add	r0, r0
 544:	11 f4       	brne	.+4      	; 0x54a <__fp_round+0xc>
 546:	88 23       	and	r24, r24
 548:	52 f0       	brmi	.+20     	; 0x55e <__fp_round+0x20>
 54a:	bb 0f       	add	r27, r27
 54c:	40 f4       	brcc	.+16     	; 0x55e <__fp_round+0x20>
 54e:	bf 2b       	or	r27, r31
 550:	11 f4       	brne	.+4      	; 0x556 <__fp_round+0x18>
 552:	60 ff       	sbrs	r22, 0
 554:	04 c0       	rjmp	.+8      	; 0x55e <__fp_round+0x20>
 556:	6f 5f       	subi	r22, 0xFF	; 255
 558:	7f 4f       	sbci	r23, 0xFF	; 255
 55a:	8f 4f       	sbci	r24, 0xFF	; 255
 55c:	9f 4f       	sbci	r25, 0xFF	; 255
 55e:	08 95       	ret

00000560 <__fp_split3>:
 560:	57 fd       	sbrc	r21, 7
 562:	90 58       	subi	r25, 0x80	; 128
 564:	44 0f       	add	r20, r20
 566:	55 1f       	adc	r21, r21
 568:	59 f0       	breq	.+22     	; 0x580 <__fp_splitA+0x10>
 56a:	5f 3f       	cpi	r21, 0xFF	; 255
 56c:	71 f0       	breq	.+28     	; 0x58a <__fp_splitA+0x1a>
 56e:	47 95       	ror	r20

00000570 <__fp_splitA>:
 570:	88 0f       	add	r24, r24
 572:	97 fb       	bst	r25, 7
 574:	99 1f       	adc	r25, r25
 576:	61 f0       	breq	.+24     	; 0x590 <__fp_splitA+0x20>
 578:	9f 3f       	cpi	r25, 0xFF	; 255
 57a:	79 f0       	breq	.+30     	; 0x59a <__fp_splitA+0x2a>
 57c:	87 95       	ror	r24
 57e:	08 95       	ret
 580:	12 16       	cp	r1, r18
 582:	13 06       	cpc	r1, r19
 584:	14 06       	cpc	r1, r20
 586:	55 1f       	adc	r21, r21
 588:	f2 cf       	rjmp	.-28     	; 0x56e <__fp_split3+0xe>
 58a:	46 95       	lsr	r20
 58c:	f1 df       	rcall	.-30     	; 0x570 <__fp_splitA>
 58e:	08 c0       	rjmp	.+16     	; 0x5a0 <__fp_splitA+0x30>
 590:	16 16       	cp	r1, r22
 592:	17 06       	cpc	r1, r23
 594:	18 06       	cpc	r1, r24
 596:	99 1f       	adc	r25, r25
 598:	f1 cf       	rjmp	.-30     	; 0x57c <__fp_splitA+0xc>
 59a:	86 95       	lsr	r24
 59c:	71 05       	cpc	r23, r1
 59e:	61 05       	cpc	r22, r1
 5a0:	08 94       	sec
 5a2:	08 95       	ret

000005a4 <__fp_zero>:
 5a4:	e8 94       	clt

000005a6 <__fp_szero>:
 5a6:	bb 27       	eor	r27, r27
 5a8:	66 27       	eor	r22, r22
 5aa:	77 27       	eor	r23, r23
 5ac:	cb 01       	movw	r24, r22
 5ae:	97 f9       	bld	r25, 7
 5b0:	08 95       	ret

000005b2 <__mulsf3>:
 5b2:	0e 94 ec 02 	call	0x5d8	; 0x5d8 <__mulsf3x>
 5b6:	0c 94 9f 02 	jmp	0x53e	; 0x53e <__fp_round>
 5ba:	0e 94 91 02 	call	0x522	; 0x522 <__fp_pscA>
 5be:	38 f0       	brcs	.+14     	; 0x5ce <__mulsf3+0x1c>
 5c0:	0e 94 98 02 	call	0x530	; 0x530 <__fp_pscB>
 5c4:	20 f0       	brcs	.+8      	; 0x5ce <__mulsf3+0x1c>
 5c6:	95 23       	and	r25, r21
 5c8:	11 f0       	breq	.+4      	; 0x5ce <__mulsf3+0x1c>
 5ca:	0c 94 88 02 	jmp	0x510	; 0x510 <__fp_inf>
 5ce:	0c 94 8e 02 	jmp	0x51c	; 0x51c <__fp_nan>
 5d2:	11 24       	eor	r1, r1
 5d4:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__fp_szero>

000005d8 <__mulsf3x>:
 5d8:	0e 94 b0 02 	call	0x560	; 0x560 <__fp_split3>
 5dc:	70 f3       	brcs	.-36     	; 0x5ba <__mulsf3+0x8>

000005de <__mulsf3_pse>:
 5de:	95 9f       	mul	r25, r21
 5e0:	c1 f3       	breq	.-16     	; 0x5d2 <__mulsf3+0x20>
 5e2:	95 0f       	add	r25, r21
 5e4:	50 e0       	ldi	r21, 0x00	; 0
 5e6:	55 1f       	adc	r21, r21
 5e8:	62 9f       	mul	r22, r18
 5ea:	f0 01       	movw	r30, r0
 5ec:	72 9f       	mul	r23, r18
 5ee:	bb 27       	eor	r27, r27
 5f0:	f0 0d       	add	r31, r0
 5f2:	b1 1d       	adc	r27, r1
 5f4:	63 9f       	mul	r22, r19
 5f6:	aa 27       	eor	r26, r26
 5f8:	f0 0d       	add	r31, r0
 5fa:	b1 1d       	adc	r27, r1
 5fc:	aa 1f       	adc	r26, r26
 5fe:	64 9f       	mul	r22, r20
 600:	66 27       	eor	r22, r22
 602:	b0 0d       	add	r27, r0
 604:	a1 1d       	adc	r26, r1
 606:	66 1f       	adc	r22, r22
 608:	82 9f       	mul	r24, r18
 60a:	22 27       	eor	r18, r18
 60c:	b0 0d       	add	r27, r0
 60e:	a1 1d       	adc	r26, r1
 610:	62 1f       	adc	r22, r18
 612:	73 9f       	mul	r23, r19
 614:	b0 0d       	add	r27, r0
 616:	a1 1d       	adc	r26, r1
 618:	62 1f       	adc	r22, r18
 61a:	83 9f       	mul	r24, r19
 61c:	a0 0d       	add	r26, r0
 61e:	61 1d       	adc	r22, r1
 620:	22 1f       	adc	r18, r18
 622:	74 9f       	mul	r23, r20
 624:	33 27       	eor	r19, r19
 626:	a0 0d       	add	r26, r0
 628:	61 1d       	adc	r22, r1
 62a:	23 1f       	adc	r18, r19
 62c:	84 9f       	mul	r24, r20
 62e:	60 0d       	add	r22, r0
 630:	21 1d       	adc	r18, r1
 632:	82 2f       	mov	r24, r18
 634:	76 2f       	mov	r23, r22
 636:	6a 2f       	mov	r22, r26
 638:	11 24       	eor	r1, r1
 63a:	9f 57       	subi	r25, 0x7F	; 127
 63c:	50 40       	sbci	r21, 0x00	; 0
 63e:	9a f0       	brmi	.+38     	; 0x666 <__mulsf3_pse+0x88>
 640:	f1 f0       	breq	.+60     	; 0x67e <__mulsf3_pse+0xa0>
 642:	88 23       	and	r24, r24
 644:	4a f0       	brmi	.+18     	; 0x658 <__mulsf3_pse+0x7a>
 646:	ee 0f       	add	r30, r30
 648:	ff 1f       	adc	r31, r31
 64a:	bb 1f       	adc	r27, r27
 64c:	66 1f       	adc	r22, r22
 64e:	77 1f       	adc	r23, r23
 650:	88 1f       	adc	r24, r24
 652:	91 50       	subi	r25, 0x01	; 1
 654:	50 40       	sbci	r21, 0x00	; 0
 656:	a9 f7       	brne	.-22     	; 0x642 <__mulsf3_pse+0x64>
 658:	9e 3f       	cpi	r25, 0xFE	; 254
 65a:	51 05       	cpc	r21, r1
 65c:	80 f0       	brcs	.+32     	; 0x67e <__mulsf3_pse+0xa0>
 65e:	0c 94 88 02 	jmp	0x510	; 0x510 <__fp_inf>
 662:	0c 94 d3 02 	jmp	0x5a6	; 0x5a6 <__fp_szero>
 666:	5f 3f       	cpi	r21, 0xFF	; 255
 668:	e4 f3       	brlt	.-8      	; 0x662 <__mulsf3_pse+0x84>
 66a:	98 3e       	cpi	r25, 0xE8	; 232
 66c:	d4 f3       	brlt	.-12     	; 0x662 <__mulsf3_pse+0x84>
 66e:	86 95       	lsr	r24
 670:	77 95       	ror	r23
 672:	67 95       	ror	r22
 674:	b7 95       	ror	r27
 676:	f7 95       	ror	r31
 678:	e7 95       	ror	r30
 67a:	9f 5f       	subi	r25, 0xFF	; 255
 67c:	c1 f7       	brne	.-16     	; 0x66e <__mulsf3_pse+0x90>
 67e:	fe 2b       	or	r31, r30
 680:	88 0f       	add	r24, r24
 682:	91 1d       	adc	r25, r1
 684:	96 95       	lsr	r25
 686:	87 95       	ror	r24
 688:	97 f9       	bld	r25, 7
 68a:	08 95       	ret

0000068c <__divmodhi4>:
 68c:	97 fb       	bst	r25, 7
 68e:	07 2e       	mov	r0, r23
 690:	16 f4       	brtc	.+4      	; 0x696 <__divmodhi4+0xa>
 692:	00 94       	com	r0
 694:	07 d0       	rcall	.+14     	; 0x6a4 <__divmodhi4_neg1>
 696:	77 fd       	sbrc	r23, 7
 698:	09 d0       	rcall	.+18     	; 0x6ac <__divmodhi4_neg2>
 69a:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__udivmodhi4>
 69e:	07 fc       	sbrc	r0, 7
 6a0:	05 d0       	rcall	.+10     	; 0x6ac <__divmodhi4_neg2>
 6a2:	3e f4       	brtc	.+14     	; 0x6b2 <__divmodhi4_exit>

000006a4 <__divmodhi4_neg1>:
 6a4:	90 95       	com	r25
 6a6:	81 95       	neg	r24
 6a8:	9f 4f       	sbci	r25, 0xFF	; 255
 6aa:	08 95       	ret

000006ac <__divmodhi4_neg2>:
 6ac:	70 95       	com	r23
 6ae:	61 95       	neg	r22
 6b0:	7f 4f       	sbci	r23, 0xFF	; 255

000006b2 <__divmodhi4_exit>:
 6b2:	08 95       	ret

000006b4 <__udivmodhi4>:
 6b4:	aa 1b       	sub	r26, r26
 6b6:	bb 1b       	sub	r27, r27
 6b8:	51 e1       	ldi	r21, 0x11	; 17
 6ba:	07 c0       	rjmp	.+14     	; 0x6ca <__udivmodhi4_ep>

000006bc <__udivmodhi4_loop>:
 6bc:	aa 1f       	adc	r26, r26
 6be:	bb 1f       	adc	r27, r27
 6c0:	a6 17       	cp	r26, r22
 6c2:	b7 07       	cpc	r27, r23
 6c4:	10 f0       	brcs	.+4      	; 0x6ca <__udivmodhi4_ep>
 6c6:	a6 1b       	sub	r26, r22
 6c8:	b7 0b       	sbc	r27, r23

000006ca <__udivmodhi4_ep>:
 6ca:	88 1f       	adc	r24, r24
 6cc:	99 1f       	adc	r25, r25
 6ce:	5a 95       	dec	r21
 6d0:	a9 f7       	brne	.-22     	; 0x6bc <__udivmodhi4_loop>
 6d2:	80 95       	com	r24
 6d4:	90 95       	com	r25
 6d6:	bc 01       	movw	r22, r24
 6d8:	cd 01       	movw	r24, r26
 6da:	08 95       	ret

000006dc <_exit>:
 6dc:	f8 94       	cli

000006de <__stop_program>:
 6de:	ff cf       	rjmp	.-2      	; 0x6de <__stop_program>
