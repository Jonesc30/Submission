
ADC+UART.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000e  00800100  000005f8  0000068c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005f8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080010e  0080010e  0000069a  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000069a  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000006cc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000050  00000000  00000000  0000070c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000b18  00000000  00000000  0000075c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009de  00000000  00000000  00001274  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000003a9  00000000  00000000  00001c52  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00001ffc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004e3  00000000  00000000  000020d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000001ab  00000000  00000000  000025bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000040  00000000  00000000  00002766  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
   c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  10:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  14:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  18:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  1c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  20:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  24:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  28:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  2c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  30:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  34:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  38:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  3c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  40:	0c 94 9c 00 	jmp	0x138	; 0x138 <__vector_16>
  44:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  48:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  4c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  50:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  54:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  58:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  5c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  60:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  64:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  68:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  6c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  70:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  74:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  78:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  7c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  80:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  84:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  88:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  8c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  90:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  94:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  98:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  9c:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a4:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  a8:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  ac:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>
  b0:	0c 94 77 00 	jmp	0xee	; 0xee <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_copy_data>:
  c0:	11 e0       	ldi	r17, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	e8 ef       	ldi	r30, 0xF8	; 248
  c8:	f5 e0       	ldi	r31, 0x05	; 5
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <__do_copy_data+0x10>
  cc:	05 90       	lpm	r0, Z+
  ce:	0d 92       	st	X+, r0
  d0:	ae 30       	cpi	r26, 0x0E	; 14
  d2:	b1 07       	cpc	r27, r17
  d4:	d9 f7       	brne	.-10     	; 0xcc <__do_copy_data+0xc>

000000d6 <__do_clear_bss>:
  d6:	21 e0       	ldi	r18, 0x01	; 1
  d8:	ae e0       	ldi	r26, 0x0E	; 14
  da:	b1 e0       	ldi	r27, 0x01	; 1
  dc:	01 c0       	rjmp	.+2      	; 0xe0 <.do_clear_bss_start>

000000de <.do_clear_bss_loop>:
  de:	1d 92       	st	X+, r1

000000e0 <.do_clear_bss_start>:
  e0:	af 30       	cpi	r26, 0x0F	; 15
  e2:	b2 07       	cpc	r27, r18
  e4:	e1 f7       	brne	.-8      	; 0xde <.do_clear_bss_loop>
  e6:	0e 94 1a 01 	call	0x234	; 0x234 <main>
  ea:	0c 94 fa 02 	jmp	0x5f4	; 0x5f4 <_exit>

000000ee <__bad_interrupt>:
  ee:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000f2 <USART_init>:

unsigned char USART_receive(void)
{
	while(!(UCSR0A & (1 << RXC0)));
	return UDR0;
}
  f2:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  f6:	87 e6       	ldi	r24, 0x67	; 103
  f8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  fc:	88 e1       	ldi	r24, 0x18	; 24
  fe:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
 102:	86 e0       	ldi	r24, 0x06	; 6
 104:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
 108:	08 95       	ret

0000010a <USART_transmit>:

void USART_transmit(unsigned char data)
{
	while(!(UCSR0A & (1 << UDRE0)));
 10a:	e0 ec       	ldi	r30, 0xC0	; 192
 10c:	f0 e0       	ldi	r31, 0x00	; 0
 10e:	90 81       	ld	r25, Z
 110:	95 ff       	sbrs	r25, 5
 112:	fd cf       	rjmp	.-6      	; 0x10e <USART_transmit+0x4>
	UDR0 = data;
 114:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 118:	08 95       	ret

0000011a <USART_putstring>:
}

void USART_putstring(char* StringPtr)
{
 11a:	cf 93       	push	r28
 11c:	df 93       	push	r29
 11e:	ec 01       	movw	r28, r24
	while(*StringPtr != 0x00)
 120:	88 81       	ld	r24, Y
 122:	88 23       	and	r24, r24
 124:	31 f0       	breq	.+12     	; 0x132 <USART_putstring+0x18>
 126:	21 96       	adiw	r28, 0x01	; 1
	{
		USART_transmit(*StringPtr);
 128:	0e 94 85 00 	call	0x10a	; 0x10a <USART_transmit>
	UDR0 = data;
}

void USART_putstring(char* StringPtr)
{
	while(*StringPtr != 0x00)
 12c:	89 91       	ld	r24, Y+
 12e:	81 11       	cpse	r24, r1
 130:	fb cf       	rjmp	.-10     	; 0x128 <USART_putstring+0xe>
	{
		USART_transmit(*StringPtr);
		StringPtr++;
	}
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	08 95       	ret

00000138 <__vector_16>:

ISR (TIMER0_OVF_vect)
{
 138:	1f 92       	push	r1
 13a:	0f 92       	push	r0
 13c:	0f b6       	in	r0, 0x3f	; 63
 13e:	0f 92       	push	r0
 140:	11 24       	eor	r1, r1
 142:	2f 93       	push	r18
 144:	3f 93       	push	r19
 146:	4f 93       	push	r20
 148:	5f 93       	push	r21
 14a:	6f 93       	push	r22
 14c:	7f 93       	push	r23
 14e:	8f 93       	push	r24
 150:	9f 93       	push	r25
 152:	af 93       	push	r26
 154:	bf 93       	push	r27
 156:	cf 93       	push	r28
 158:	ef 93       	push	r30
 15a:	ff 93       	push	r31
	OVF_COUNT++; //increment the overflow counter
 15c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <__data_end>
 160:	8f 5f       	subi	r24, 0xFF	; 255
 162:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <__data_end>
	if (OVF_COUNT == OVF_LIMIT) //check to see if the limit was reached
 166:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <OVF_LIMIT>
 16a:	89 13       	cpse	r24, r25
 16c:	48 c0       	rjmp	.+144    	; 0x1fe <__vector_16+0xc6>
	{
		ADCSRA|=(1<<ADSC);	//start conversion
 16e:	ea e7       	ldi	r30, 0x7A	; 122
 170:	f0 e0       	ldi	r31, 0x00	; 0
 172:	80 81       	ld	r24, Z
 174:	80 64       	ori	r24, 0x40	; 64
 176:	80 83       	st	Z, r24
		while((ADCSRA&(1<<ADIF))==0);//wait for conversion to finish
 178:	80 81       	ld	r24, Z
 17a:	84 ff       	sbrs	r24, 4
 17c:	fd cf       	rjmp	.-6      	; 0x178 <__vector_16+0x40>
		
		ADCSRA |= (1<<ADIF);
 17e:	ea e7       	ldi	r30, 0x7A	; 122
 180:	f0 e0       	ldi	r31, 0x00	; 0
 182:	80 81       	ld	r24, Z
 184:	80 61       	ori	r24, 0x10	; 16
 186:	80 83       	st	Z, r24

		int a = ADCL;
 188:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
		a = a | (ADCH<<8);
 18c:	80 91 79 00 	lds	r24, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
		a = (a/1024.0) * 5000/10;
 190:	70 e0       	ldi	r23, 0x00	; 0
 192:	78 2b       	or	r23, r24
 194:	07 2e       	mov	r0, r23
 196:	00 0c       	add	r0, r0
 198:	88 0b       	sbc	r24, r24
 19a:	99 0b       	sbc	r25, r25
 19c:	0e 94 d9 01 	call	0x3b2	; 0x3b2 <__floatsisf>
 1a0:	20 e0       	ldi	r18, 0x00	; 0
 1a2:	30 e0       	ldi	r19, 0x00	; 0
 1a4:	40 e8       	ldi	r20, 0x80	; 128
 1a6:	5a e3       	ldi	r21, 0x3A	; 58
 1a8:	0e 94 65 02 	call	0x4ca	; 0x4ca <__mulsf3>
 1ac:	20 e0       	ldi	r18, 0x00	; 0
 1ae:	30 e4       	ldi	r19, 0x40	; 64
 1b0:	4c e9       	ldi	r20, 0x9C	; 156
 1b2:	55 e4       	ldi	r21, 0x45	; 69
 1b4:	0e 94 65 02 	call	0x4ca	; 0x4ca <__mulsf3>
 1b8:	20 e0       	ldi	r18, 0x00	; 0
 1ba:	30 e0       	ldi	r19, 0x00	; 0
 1bc:	40 e2       	ldi	r20, 0x20	; 32
 1be:	51 e4       	ldi	r21, 0x41	; 65
 1c0:	0e 94 2f 01 	call	0x25e	; 0x25e <__divsf3>
		a = (a*2)+32; //equation to convert celsius to farenheit. can't use used 2 instead of 9/5
 1c4:	0e 94 a1 01 	call	0x342	; 0x342 <__fixsfsi>
 1c8:	60 5f       	subi	r22, 0xF0	; 240
 1ca:	7f 4f       	sbci	r23, 0xFF	; 255
 1cc:	cb 01       	movw	r24, r22
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
		a = a % 100;
 1d2:	64 e6       	ldi	r22, 0x64	; 100
 1d4:	70 e0       	ldi	r23, 0x00	; 0
 1d6:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__divmodhi4>
		USART_transmit((a/10)+'0');
 1da:	6a e0       	ldi	r22, 0x0A	; 10
 1dc:	70 e0       	ldi	r23, 0x00	; 0
 1de:	0e 94 d2 02 	call	0x5a4	; 0x5a4 <__divmodhi4>
 1e2:	c8 2f       	mov	r28, r24
 1e4:	80 e3       	ldi	r24, 0x30	; 48
 1e6:	86 0f       	add	r24, r22
 1e8:	0e 94 85 00 	call	0x10a	; 0x10a <USART_transmit>
		a = a % 10;
		USART_transmit((a)+'0');
 1ec:	80 e3       	ldi	r24, 0x30	; 48
 1ee:	8c 0f       	add	r24, r28
 1f0:	0e 94 85 00 	call	0x10a	; 0x10a <USART_transmit>
		USART_transmit('\n');
 1f4:	8a e0       	ldi	r24, 0x0A	; 10
 1f6:	0e 94 85 00 	call	0x10a	; 0x10a <USART_transmit>
		OVF_COUNT = 0; //reset overflow counter
 1fa:	10 92 0e 01 	sts	0x010E, r1	; 0x80010e <__data_end>
	}
	TCNT0 = 16; //reset TOP
 1fe:	80 e1       	ldi	r24, 0x10	; 16
 200:	86 bd       	out	0x26, r24	; 38
}
 202:	ff 91       	pop	r31
 204:	ef 91       	pop	r30
 206:	cf 91       	pop	r28
 208:	bf 91       	pop	r27
 20a:	af 91       	pop	r26
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	7f 91       	pop	r23
 212:	6f 91       	pop	r22
 214:	5f 91       	pop	r21
 216:	4f 91       	pop	r20
 218:	3f 91       	pop	r19
 21a:	2f 91       	pop	r18
 21c:	0f 90       	pop	r0
 21e:	0f be       	out	0x3f, r0	; 63
 220:	0f 90       	pop	r0
 222:	1f 90       	pop	r1
 224:	18 95       	reti

00000226 <ADC_init>:

void ADC_init (void)
{
	ADMUX = (0<<REFS1)|					// reference selection bits
 226:	84 e4       	ldi	r24, 0x44	; 68
 228:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	(1<<REFS0)|							// AVcc - external cap at AREF
	(0<<ADLAR)|							// ADC Left Adjust Result
	(1<<MUX2)|							// Analog Channel Selection Bits
	(0<<MUX1)|							// ADC5 (PC5)
	(0<<MUX0);
	ADCSRA = (1<<ADEN)|					// ADC Enable
 22c:	85 e8       	ldi	r24, 0x85	; 133
 22e:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
 232:	08 95       	ret

00000234 <main>:
uint8_t OVF_COUNT = 0; //initialize the overflow count for interrupt
uint8_t OVF_LIMIT = 250; //set the limit the count can reach to set 1 sec delay

int main(void)
{
	USART_init(); //initialize USART
 234:	0e 94 79 00 	call	0xf2	; 0xf2 <USART_init>
	ADC_init (); //initialize ADC
 238:	0e 94 13 01 	call	0x226	; 0x226 <ADC_init>
	USART_putstring("Connected\r\n");
 23c:	81 e0       	ldi	r24, 0x01	; 1
 23e:	91 e0       	ldi	r25, 0x01	; 1
 240:	0e 94 8d 00 	call	0x11a	; 0x11a <USART_putstring>
	
	
	TCCR0A = 0x00; //normal operation
 244:	14 bc       	out	0x24, r1	; 36
	TCCR0B |= (1 << CS02); //set prescalar to 256
 246:	85 b5       	in	r24, 0x25	; 37
 248:	84 60       	ori	r24, 0x04	; 4
 24a:	85 bd       	out	0x25, r24	; 37
	TCNT0 = 16; //TOP = 256-240 = 16
 24c:	80 e1       	ldi	r24, 0x10	; 16
 24e:	86 bd       	out	0x26, r24	; 38
	TIMSK0 |= (1 << TOIE0);
 250:	ee e6       	ldi	r30, 0x6E	; 110
 252:	f0 e0       	ldi	r31, 0x00	; 0
 254:	80 81       	ld	r24, Z
 256:	81 60       	ori	r24, 0x01	; 1
 258:	80 83       	st	Z, r24
	sei(); //enable interrupt
 25a:	78 94       	sei
 25c:	ff cf       	rjmp	.-2      	; 0x25c <main+0x28>

0000025e <__divsf3>:
 25e:	0e 94 43 01 	call	0x286	; 0x286 <__divsf3x>
 262:	0c 94 2b 02 	jmp	0x456	; 0x456 <__fp_round>
 266:	0e 94 24 02 	call	0x448	; 0x448 <__fp_pscB>
 26a:	58 f0       	brcs	.+22     	; 0x282 <__divsf3+0x24>
 26c:	0e 94 1d 02 	call	0x43a	; 0x43a <__fp_pscA>
 270:	40 f0       	brcs	.+16     	; 0x282 <__divsf3+0x24>
 272:	29 f4       	brne	.+10     	; 0x27e <__divsf3+0x20>
 274:	5f 3f       	cpi	r21, 0xFF	; 255
 276:	29 f0       	breq	.+10     	; 0x282 <__divsf3+0x24>
 278:	0c 94 14 02 	jmp	0x428	; 0x428 <__fp_inf>
 27c:	51 11       	cpse	r21, r1
 27e:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__fp_szero>
 282:	0c 94 1a 02 	jmp	0x434	; 0x434 <__fp_nan>

00000286 <__divsf3x>:
 286:	0e 94 3c 02 	call	0x478	; 0x478 <__fp_split3>
 28a:	68 f3       	brcs	.-38     	; 0x266 <__divsf3+0x8>

0000028c <__divsf3_pse>:
 28c:	99 23       	and	r25, r25
 28e:	b1 f3       	breq	.-20     	; 0x27c <__divsf3+0x1e>
 290:	55 23       	and	r21, r21
 292:	91 f3       	breq	.-28     	; 0x278 <__divsf3+0x1a>
 294:	95 1b       	sub	r25, r21
 296:	55 0b       	sbc	r21, r21
 298:	bb 27       	eor	r27, r27
 29a:	aa 27       	eor	r26, r26
 29c:	62 17       	cp	r22, r18
 29e:	73 07       	cpc	r23, r19
 2a0:	84 07       	cpc	r24, r20
 2a2:	38 f0       	brcs	.+14     	; 0x2b2 <__divsf3_pse+0x26>
 2a4:	9f 5f       	subi	r25, 0xFF	; 255
 2a6:	5f 4f       	sbci	r21, 0xFF	; 255
 2a8:	22 0f       	add	r18, r18
 2aa:	33 1f       	adc	r19, r19
 2ac:	44 1f       	adc	r20, r20
 2ae:	aa 1f       	adc	r26, r26
 2b0:	a9 f3       	breq	.-22     	; 0x29c <__divsf3_pse+0x10>
 2b2:	35 d0       	rcall	.+106    	; 0x31e <__divsf3_pse+0x92>
 2b4:	0e 2e       	mov	r0, r30
 2b6:	3a f0       	brmi	.+14     	; 0x2c6 <__divsf3_pse+0x3a>
 2b8:	e0 e8       	ldi	r30, 0x80	; 128
 2ba:	32 d0       	rcall	.+100    	; 0x320 <__divsf3_pse+0x94>
 2bc:	91 50       	subi	r25, 0x01	; 1
 2be:	50 40       	sbci	r21, 0x00	; 0
 2c0:	e6 95       	lsr	r30
 2c2:	00 1c       	adc	r0, r0
 2c4:	ca f7       	brpl	.-14     	; 0x2b8 <__divsf3_pse+0x2c>
 2c6:	2b d0       	rcall	.+86     	; 0x31e <__divsf3_pse+0x92>
 2c8:	fe 2f       	mov	r31, r30
 2ca:	29 d0       	rcall	.+82     	; 0x31e <__divsf3_pse+0x92>
 2cc:	66 0f       	add	r22, r22
 2ce:	77 1f       	adc	r23, r23
 2d0:	88 1f       	adc	r24, r24
 2d2:	bb 1f       	adc	r27, r27
 2d4:	26 17       	cp	r18, r22
 2d6:	37 07       	cpc	r19, r23
 2d8:	48 07       	cpc	r20, r24
 2da:	ab 07       	cpc	r26, r27
 2dc:	b0 e8       	ldi	r27, 0x80	; 128
 2de:	09 f0       	breq	.+2      	; 0x2e2 <__divsf3_pse+0x56>
 2e0:	bb 0b       	sbc	r27, r27
 2e2:	80 2d       	mov	r24, r0
 2e4:	bf 01       	movw	r22, r30
 2e6:	ff 27       	eor	r31, r31
 2e8:	93 58       	subi	r25, 0x83	; 131
 2ea:	5f 4f       	sbci	r21, 0xFF	; 255
 2ec:	3a f0       	brmi	.+14     	; 0x2fc <__divsf3_pse+0x70>
 2ee:	9e 3f       	cpi	r25, 0xFE	; 254
 2f0:	51 05       	cpc	r21, r1
 2f2:	78 f0       	brcs	.+30     	; 0x312 <__divsf3_pse+0x86>
 2f4:	0c 94 14 02 	jmp	0x428	; 0x428 <__fp_inf>
 2f8:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__fp_szero>
 2fc:	5f 3f       	cpi	r21, 0xFF	; 255
 2fe:	e4 f3       	brlt	.-8      	; 0x2f8 <__divsf3_pse+0x6c>
 300:	98 3e       	cpi	r25, 0xE8	; 232
 302:	d4 f3       	brlt	.-12     	; 0x2f8 <__divsf3_pse+0x6c>
 304:	86 95       	lsr	r24
 306:	77 95       	ror	r23
 308:	67 95       	ror	r22
 30a:	b7 95       	ror	r27
 30c:	f7 95       	ror	r31
 30e:	9f 5f       	subi	r25, 0xFF	; 255
 310:	c9 f7       	brne	.-14     	; 0x304 <__divsf3_pse+0x78>
 312:	88 0f       	add	r24, r24
 314:	91 1d       	adc	r25, r1
 316:	96 95       	lsr	r25
 318:	87 95       	ror	r24
 31a:	97 f9       	bld	r25, 7
 31c:	08 95       	ret
 31e:	e1 e0       	ldi	r30, 0x01	; 1
 320:	66 0f       	add	r22, r22
 322:	77 1f       	adc	r23, r23
 324:	88 1f       	adc	r24, r24
 326:	bb 1f       	adc	r27, r27
 328:	62 17       	cp	r22, r18
 32a:	73 07       	cpc	r23, r19
 32c:	84 07       	cpc	r24, r20
 32e:	ba 07       	cpc	r27, r26
 330:	20 f0       	brcs	.+8      	; 0x33a <__divsf3_pse+0xae>
 332:	62 1b       	sub	r22, r18
 334:	73 0b       	sbc	r23, r19
 336:	84 0b       	sbc	r24, r20
 338:	ba 0b       	sbc	r27, r26
 33a:	ee 1f       	adc	r30, r30
 33c:	88 f7       	brcc	.-30     	; 0x320 <__divsf3_pse+0x94>
 33e:	e0 95       	com	r30
 340:	08 95       	ret

00000342 <__fixsfsi>:
 342:	0e 94 a8 01 	call	0x350	; 0x350 <__fixunssfsi>
 346:	68 94       	set
 348:	b1 11       	cpse	r27, r1
 34a:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__fp_szero>
 34e:	08 95       	ret

00000350 <__fixunssfsi>:
 350:	0e 94 44 02 	call	0x488	; 0x488 <__fp_splitA>
 354:	88 f0       	brcs	.+34     	; 0x378 <__fixunssfsi+0x28>
 356:	9f 57       	subi	r25, 0x7F	; 127
 358:	98 f0       	brcs	.+38     	; 0x380 <__fixunssfsi+0x30>
 35a:	b9 2f       	mov	r27, r25
 35c:	99 27       	eor	r25, r25
 35e:	b7 51       	subi	r27, 0x17	; 23
 360:	b0 f0       	brcs	.+44     	; 0x38e <__fixunssfsi+0x3e>
 362:	e1 f0       	breq	.+56     	; 0x39c <__fixunssfsi+0x4c>
 364:	66 0f       	add	r22, r22
 366:	77 1f       	adc	r23, r23
 368:	88 1f       	adc	r24, r24
 36a:	99 1f       	adc	r25, r25
 36c:	1a f0       	brmi	.+6      	; 0x374 <__fixunssfsi+0x24>
 36e:	ba 95       	dec	r27
 370:	c9 f7       	brne	.-14     	; 0x364 <__fixunssfsi+0x14>
 372:	14 c0       	rjmp	.+40     	; 0x39c <__fixunssfsi+0x4c>
 374:	b1 30       	cpi	r27, 0x01	; 1
 376:	91 f0       	breq	.+36     	; 0x39c <__fixunssfsi+0x4c>
 378:	0e 94 5e 02 	call	0x4bc	; 0x4bc <__fp_zero>
 37c:	b1 e0       	ldi	r27, 0x01	; 1
 37e:	08 95       	ret
 380:	0c 94 5e 02 	jmp	0x4bc	; 0x4bc <__fp_zero>
 384:	67 2f       	mov	r22, r23
 386:	78 2f       	mov	r23, r24
 388:	88 27       	eor	r24, r24
 38a:	b8 5f       	subi	r27, 0xF8	; 248
 38c:	39 f0       	breq	.+14     	; 0x39c <__fixunssfsi+0x4c>
 38e:	b9 3f       	cpi	r27, 0xF9	; 249
 390:	cc f3       	brlt	.-14     	; 0x384 <__fixunssfsi+0x34>
 392:	86 95       	lsr	r24
 394:	77 95       	ror	r23
 396:	67 95       	ror	r22
 398:	b3 95       	inc	r27
 39a:	d9 f7       	brne	.-10     	; 0x392 <__fixunssfsi+0x42>
 39c:	3e f4       	brtc	.+14     	; 0x3ac <__fixunssfsi+0x5c>
 39e:	90 95       	com	r25
 3a0:	80 95       	com	r24
 3a2:	70 95       	com	r23
 3a4:	61 95       	neg	r22
 3a6:	7f 4f       	sbci	r23, 0xFF	; 255
 3a8:	8f 4f       	sbci	r24, 0xFF	; 255
 3aa:	9f 4f       	sbci	r25, 0xFF	; 255
 3ac:	08 95       	ret

000003ae <__floatunsisf>:
 3ae:	e8 94       	clt
 3b0:	09 c0       	rjmp	.+18     	; 0x3c4 <__floatsisf+0x12>

000003b2 <__floatsisf>:
 3b2:	97 fb       	bst	r25, 7
 3b4:	3e f4       	brtc	.+14     	; 0x3c4 <__floatsisf+0x12>
 3b6:	90 95       	com	r25
 3b8:	80 95       	com	r24
 3ba:	70 95       	com	r23
 3bc:	61 95       	neg	r22
 3be:	7f 4f       	sbci	r23, 0xFF	; 255
 3c0:	8f 4f       	sbci	r24, 0xFF	; 255
 3c2:	9f 4f       	sbci	r25, 0xFF	; 255
 3c4:	99 23       	and	r25, r25
 3c6:	a9 f0       	breq	.+42     	; 0x3f2 <__floatsisf+0x40>
 3c8:	f9 2f       	mov	r31, r25
 3ca:	96 e9       	ldi	r25, 0x96	; 150
 3cc:	bb 27       	eor	r27, r27
 3ce:	93 95       	inc	r25
 3d0:	f6 95       	lsr	r31
 3d2:	87 95       	ror	r24
 3d4:	77 95       	ror	r23
 3d6:	67 95       	ror	r22
 3d8:	b7 95       	ror	r27
 3da:	f1 11       	cpse	r31, r1
 3dc:	f8 cf       	rjmp	.-16     	; 0x3ce <__floatsisf+0x1c>
 3de:	fa f4       	brpl	.+62     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3e0:	bb 0f       	add	r27, r27
 3e2:	11 f4       	brne	.+4      	; 0x3e8 <__floatsisf+0x36>
 3e4:	60 ff       	sbrs	r22, 0
 3e6:	1b c0       	rjmp	.+54     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3e8:	6f 5f       	subi	r22, 0xFF	; 255
 3ea:	7f 4f       	sbci	r23, 0xFF	; 255
 3ec:	8f 4f       	sbci	r24, 0xFF	; 255
 3ee:	9f 4f       	sbci	r25, 0xFF	; 255
 3f0:	16 c0       	rjmp	.+44     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 3f2:	88 23       	and	r24, r24
 3f4:	11 f0       	breq	.+4      	; 0x3fa <__floatsisf+0x48>
 3f6:	96 e9       	ldi	r25, 0x96	; 150
 3f8:	11 c0       	rjmp	.+34     	; 0x41c <__LOCK_REGION_LENGTH__+0x1c>
 3fa:	77 23       	and	r23, r23
 3fc:	21 f0       	breq	.+8      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
 3fe:	9e e8       	ldi	r25, 0x8E	; 142
 400:	87 2f       	mov	r24, r23
 402:	76 2f       	mov	r23, r22
 404:	05 c0       	rjmp	.+10     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 406:	66 23       	and	r22, r22
 408:	71 f0       	breq	.+28     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 40a:	96 e8       	ldi	r25, 0x86	; 134
 40c:	86 2f       	mov	r24, r22
 40e:	70 e0       	ldi	r23, 0x00	; 0
 410:	60 e0       	ldi	r22, 0x00	; 0
 412:	2a f0       	brmi	.+10     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
 414:	9a 95       	dec	r25
 416:	66 0f       	add	r22, r22
 418:	77 1f       	adc	r23, r23
 41a:	88 1f       	adc	r24, r24
 41c:	da f7       	brpl	.-10     	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
 41e:	88 0f       	add	r24, r24
 420:	96 95       	lsr	r25
 422:	87 95       	ror	r24
 424:	97 f9       	bld	r25, 7
 426:	08 95       	ret

00000428 <__fp_inf>:
 428:	97 f9       	bld	r25, 7
 42a:	9f 67       	ori	r25, 0x7F	; 127
 42c:	80 e8       	ldi	r24, 0x80	; 128
 42e:	70 e0       	ldi	r23, 0x00	; 0
 430:	60 e0       	ldi	r22, 0x00	; 0
 432:	08 95       	ret

00000434 <__fp_nan>:
 434:	9f ef       	ldi	r25, 0xFF	; 255
 436:	80 ec       	ldi	r24, 0xC0	; 192
 438:	08 95       	ret

0000043a <__fp_pscA>:
 43a:	00 24       	eor	r0, r0
 43c:	0a 94       	dec	r0
 43e:	16 16       	cp	r1, r22
 440:	17 06       	cpc	r1, r23
 442:	18 06       	cpc	r1, r24
 444:	09 06       	cpc	r0, r25
 446:	08 95       	ret

00000448 <__fp_pscB>:
 448:	00 24       	eor	r0, r0
 44a:	0a 94       	dec	r0
 44c:	12 16       	cp	r1, r18
 44e:	13 06       	cpc	r1, r19
 450:	14 06       	cpc	r1, r20
 452:	05 06       	cpc	r0, r21
 454:	08 95       	ret

00000456 <__fp_round>:
 456:	09 2e       	mov	r0, r25
 458:	03 94       	inc	r0
 45a:	00 0c       	add	r0, r0
 45c:	11 f4       	brne	.+4      	; 0x462 <__fp_round+0xc>
 45e:	88 23       	and	r24, r24
 460:	52 f0       	brmi	.+20     	; 0x476 <__fp_round+0x20>
 462:	bb 0f       	add	r27, r27
 464:	40 f4       	brcc	.+16     	; 0x476 <__fp_round+0x20>
 466:	bf 2b       	or	r27, r31
 468:	11 f4       	brne	.+4      	; 0x46e <__fp_round+0x18>
 46a:	60 ff       	sbrs	r22, 0
 46c:	04 c0       	rjmp	.+8      	; 0x476 <__fp_round+0x20>
 46e:	6f 5f       	subi	r22, 0xFF	; 255
 470:	7f 4f       	sbci	r23, 0xFF	; 255
 472:	8f 4f       	sbci	r24, 0xFF	; 255
 474:	9f 4f       	sbci	r25, 0xFF	; 255
 476:	08 95       	ret

00000478 <__fp_split3>:
 478:	57 fd       	sbrc	r21, 7
 47a:	90 58       	subi	r25, 0x80	; 128
 47c:	44 0f       	add	r20, r20
 47e:	55 1f       	adc	r21, r21
 480:	59 f0       	breq	.+22     	; 0x498 <__fp_splitA+0x10>
 482:	5f 3f       	cpi	r21, 0xFF	; 255
 484:	71 f0       	breq	.+28     	; 0x4a2 <__fp_splitA+0x1a>
 486:	47 95       	ror	r20

00000488 <__fp_splitA>:
 488:	88 0f       	add	r24, r24
 48a:	97 fb       	bst	r25, 7
 48c:	99 1f       	adc	r25, r25
 48e:	61 f0       	breq	.+24     	; 0x4a8 <__fp_splitA+0x20>
 490:	9f 3f       	cpi	r25, 0xFF	; 255
 492:	79 f0       	breq	.+30     	; 0x4b2 <__fp_splitA+0x2a>
 494:	87 95       	ror	r24
 496:	08 95       	ret
 498:	12 16       	cp	r1, r18
 49a:	13 06       	cpc	r1, r19
 49c:	14 06       	cpc	r1, r20
 49e:	55 1f       	adc	r21, r21
 4a0:	f2 cf       	rjmp	.-28     	; 0x486 <__fp_split3+0xe>
 4a2:	46 95       	lsr	r20
 4a4:	f1 df       	rcall	.-30     	; 0x488 <__fp_splitA>
 4a6:	08 c0       	rjmp	.+16     	; 0x4b8 <__fp_splitA+0x30>
 4a8:	16 16       	cp	r1, r22
 4aa:	17 06       	cpc	r1, r23
 4ac:	18 06       	cpc	r1, r24
 4ae:	99 1f       	adc	r25, r25
 4b0:	f1 cf       	rjmp	.-30     	; 0x494 <__fp_splitA+0xc>
 4b2:	86 95       	lsr	r24
 4b4:	71 05       	cpc	r23, r1
 4b6:	61 05       	cpc	r22, r1
 4b8:	08 94       	sec
 4ba:	08 95       	ret

000004bc <__fp_zero>:
 4bc:	e8 94       	clt

000004be <__fp_szero>:
 4be:	bb 27       	eor	r27, r27
 4c0:	66 27       	eor	r22, r22
 4c2:	77 27       	eor	r23, r23
 4c4:	cb 01       	movw	r24, r22
 4c6:	97 f9       	bld	r25, 7
 4c8:	08 95       	ret

000004ca <__mulsf3>:
 4ca:	0e 94 78 02 	call	0x4f0	; 0x4f0 <__mulsf3x>
 4ce:	0c 94 2b 02 	jmp	0x456	; 0x456 <__fp_round>
 4d2:	0e 94 1d 02 	call	0x43a	; 0x43a <__fp_pscA>
 4d6:	38 f0       	brcs	.+14     	; 0x4e6 <__mulsf3+0x1c>
 4d8:	0e 94 24 02 	call	0x448	; 0x448 <__fp_pscB>
 4dc:	20 f0       	brcs	.+8      	; 0x4e6 <__mulsf3+0x1c>
 4de:	95 23       	and	r25, r21
 4e0:	11 f0       	breq	.+4      	; 0x4e6 <__mulsf3+0x1c>
 4e2:	0c 94 14 02 	jmp	0x428	; 0x428 <__fp_inf>
 4e6:	0c 94 1a 02 	jmp	0x434	; 0x434 <__fp_nan>
 4ea:	11 24       	eor	r1, r1
 4ec:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__fp_szero>

000004f0 <__mulsf3x>:
 4f0:	0e 94 3c 02 	call	0x478	; 0x478 <__fp_split3>
 4f4:	70 f3       	brcs	.-36     	; 0x4d2 <__mulsf3+0x8>

000004f6 <__mulsf3_pse>:
 4f6:	95 9f       	mul	r25, r21
 4f8:	c1 f3       	breq	.-16     	; 0x4ea <__mulsf3+0x20>
 4fa:	95 0f       	add	r25, r21
 4fc:	50 e0       	ldi	r21, 0x00	; 0
 4fe:	55 1f       	adc	r21, r21
 500:	62 9f       	mul	r22, r18
 502:	f0 01       	movw	r30, r0
 504:	72 9f       	mul	r23, r18
 506:	bb 27       	eor	r27, r27
 508:	f0 0d       	add	r31, r0
 50a:	b1 1d       	adc	r27, r1
 50c:	63 9f       	mul	r22, r19
 50e:	aa 27       	eor	r26, r26
 510:	f0 0d       	add	r31, r0
 512:	b1 1d       	adc	r27, r1
 514:	aa 1f       	adc	r26, r26
 516:	64 9f       	mul	r22, r20
 518:	66 27       	eor	r22, r22
 51a:	b0 0d       	add	r27, r0
 51c:	a1 1d       	adc	r26, r1
 51e:	66 1f       	adc	r22, r22
 520:	82 9f       	mul	r24, r18
 522:	22 27       	eor	r18, r18
 524:	b0 0d       	add	r27, r0
 526:	a1 1d       	adc	r26, r1
 528:	62 1f       	adc	r22, r18
 52a:	73 9f       	mul	r23, r19
 52c:	b0 0d       	add	r27, r0
 52e:	a1 1d       	adc	r26, r1
 530:	62 1f       	adc	r22, r18
 532:	83 9f       	mul	r24, r19
 534:	a0 0d       	add	r26, r0
 536:	61 1d       	adc	r22, r1
 538:	22 1f       	adc	r18, r18
 53a:	74 9f       	mul	r23, r20
 53c:	33 27       	eor	r19, r19
 53e:	a0 0d       	add	r26, r0
 540:	61 1d       	adc	r22, r1
 542:	23 1f       	adc	r18, r19
 544:	84 9f       	mul	r24, r20
 546:	60 0d       	add	r22, r0
 548:	21 1d       	adc	r18, r1
 54a:	82 2f       	mov	r24, r18
 54c:	76 2f       	mov	r23, r22
 54e:	6a 2f       	mov	r22, r26
 550:	11 24       	eor	r1, r1
 552:	9f 57       	subi	r25, 0x7F	; 127
 554:	50 40       	sbci	r21, 0x00	; 0
 556:	9a f0       	brmi	.+38     	; 0x57e <__mulsf3_pse+0x88>
 558:	f1 f0       	breq	.+60     	; 0x596 <__mulsf3_pse+0xa0>
 55a:	88 23       	and	r24, r24
 55c:	4a f0       	brmi	.+18     	; 0x570 <__mulsf3_pse+0x7a>
 55e:	ee 0f       	add	r30, r30
 560:	ff 1f       	adc	r31, r31
 562:	bb 1f       	adc	r27, r27
 564:	66 1f       	adc	r22, r22
 566:	77 1f       	adc	r23, r23
 568:	88 1f       	adc	r24, r24
 56a:	91 50       	subi	r25, 0x01	; 1
 56c:	50 40       	sbci	r21, 0x00	; 0
 56e:	a9 f7       	brne	.-22     	; 0x55a <__mulsf3_pse+0x64>
 570:	9e 3f       	cpi	r25, 0xFE	; 254
 572:	51 05       	cpc	r21, r1
 574:	80 f0       	brcs	.+32     	; 0x596 <__mulsf3_pse+0xa0>
 576:	0c 94 14 02 	jmp	0x428	; 0x428 <__fp_inf>
 57a:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__fp_szero>
 57e:	5f 3f       	cpi	r21, 0xFF	; 255
 580:	e4 f3       	brlt	.-8      	; 0x57a <__mulsf3_pse+0x84>
 582:	98 3e       	cpi	r25, 0xE8	; 232
 584:	d4 f3       	brlt	.-12     	; 0x57a <__mulsf3_pse+0x84>
 586:	86 95       	lsr	r24
 588:	77 95       	ror	r23
 58a:	67 95       	ror	r22
 58c:	b7 95       	ror	r27
 58e:	f7 95       	ror	r31
 590:	e7 95       	ror	r30
 592:	9f 5f       	subi	r25, 0xFF	; 255
 594:	c1 f7       	brne	.-16     	; 0x586 <__mulsf3_pse+0x90>
 596:	fe 2b       	or	r31, r30
 598:	88 0f       	add	r24, r24
 59a:	91 1d       	adc	r25, r1
 59c:	96 95       	lsr	r25
 59e:	87 95       	ror	r24
 5a0:	97 f9       	bld	r25, 7
 5a2:	08 95       	ret

000005a4 <__divmodhi4>:
 5a4:	97 fb       	bst	r25, 7
 5a6:	07 2e       	mov	r0, r23
 5a8:	16 f4       	brtc	.+4      	; 0x5ae <__divmodhi4+0xa>
 5aa:	00 94       	com	r0
 5ac:	07 d0       	rcall	.+14     	; 0x5bc <__divmodhi4_neg1>
 5ae:	77 fd       	sbrc	r23, 7
 5b0:	09 d0       	rcall	.+18     	; 0x5c4 <__divmodhi4_neg2>
 5b2:	0e 94 e6 02 	call	0x5cc	; 0x5cc <__udivmodhi4>
 5b6:	07 fc       	sbrc	r0, 7
 5b8:	05 d0       	rcall	.+10     	; 0x5c4 <__divmodhi4_neg2>
 5ba:	3e f4       	brtc	.+14     	; 0x5ca <__divmodhi4_exit>

000005bc <__divmodhi4_neg1>:
 5bc:	90 95       	com	r25
 5be:	81 95       	neg	r24
 5c0:	9f 4f       	sbci	r25, 0xFF	; 255
 5c2:	08 95       	ret

000005c4 <__divmodhi4_neg2>:
 5c4:	70 95       	com	r23
 5c6:	61 95       	neg	r22
 5c8:	7f 4f       	sbci	r23, 0xFF	; 255

000005ca <__divmodhi4_exit>:
 5ca:	08 95       	ret

000005cc <__udivmodhi4>:
 5cc:	aa 1b       	sub	r26, r26
 5ce:	bb 1b       	sub	r27, r27
 5d0:	51 e1       	ldi	r21, 0x11	; 17
 5d2:	07 c0       	rjmp	.+14     	; 0x5e2 <__udivmodhi4_ep>

000005d4 <__udivmodhi4_loop>:
 5d4:	aa 1f       	adc	r26, r26
 5d6:	bb 1f       	adc	r27, r27
 5d8:	a6 17       	cp	r26, r22
 5da:	b7 07       	cpc	r27, r23
 5dc:	10 f0       	brcs	.+4      	; 0x5e2 <__udivmodhi4_ep>
 5de:	a6 1b       	sub	r26, r22
 5e0:	b7 0b       	sbc	r27, r23

000005e2 <__udivmodhi4_ep>:
 5e2:	88 1f       	adc	r24, r24
 5e4:	99 1f       	adc	r25, r25
 5e6:	5a 95       	dec	r21
 5e8:	a9 f7       	brne	.-22     	; 0x5d4 <__udivmodhi4_loop>
 5ea:	80 95       	com	r24
 5ec:	90 95       	com	r25
 5ee:	bc 01       	movw	r22, r24
 5f0:	cd 01       	movw	r24, r26
 5f2:	08 95       	ret

000005f4 <_exit>:
 5f4:	f8 94       	cli

000005f6 <__stop_program>:
 5f6:	ff cf       	rjmp	.-2      	; 0x5f6 <__stop_program>
