
PWM DC Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000222  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001ae  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  00000222  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000222  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000254  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000294  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009bc  00000000  00000000  000002bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008f4  00000000  00000000  00000c78  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000002e6  00000000  00000000  0000156c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000064  00000000  00000000  00001854  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000481  00000000  00000000  000018b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000008a  00000000  00000000  00001d39  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00001dc3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 86 00 	jmp	0x10c	; 0x10c <__vector_4>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a4 30       	cpi	r26, 0x04	; 4
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  d4:	0c 94 d5 00 	jmp	0x1aa	; 0x1aa <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <main>:
volatile unsigned int ADC_Val;			// holds value of ADC
int toggle = 0;							// used to toggle

int main(void)
{
	DDRD |= 0x40; //PWM output
  dc:	56 9a       	sbi	0x0a, 6	; 10
	
	DDRC = 0x02;
  de:	82 e0       	ldi	r24, 0x02	; 2
  e0:	87 b9       	out	0x07, r24	; 7
	// PC0 as input and PC1 is now an output
	PORTC |= (1<<PC1);
  e2:	41 9a       	sbi	0x08, 1	; 8
	
	DDRB |= (1<<2);			//PB1 as output to stop the motor on and off
  e4:	22 9a       	sbi	0x04, 2	; 4
	PORTB |= (1<<2);				//Stops and turns it on
  e6:	2a 9a       	sbi	0x05, 2	; 5
	
	TCCR0A = 0x83;
  e8:	93 e8       	ldi	r25, 0x83	; 131
  ea:	94 bd       	out	0x24, r25	; 36
	// set none-inverting mode
	// set fast PWM Mode for timer0 max height is 256
	TCCR0B = 0x05;
  ec:	95 e0       	ldi	r25, 0x05	; 5
  ee:	95 bd       	out	0x25, r25	; 37
	// set prescaler to 1024 and starts PWM
	
	PCICR = (1<<PCIE1);			//Enable PCINT
  f0:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__DATA_REGION_ORIGIN__+0x8>
	PCMSK1 = (1<<PCINT9);		// Set interupt for PC1
  f4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__DATA_REGION_ORIGIN__+0xc>
	
	//Set up ADC
	
	ADMUX = (1<<REFS0);												// PC0 is input for ADC
  f8:	80 e4       	ldi	r24, 0x40	; 64
  fa:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA |= (1<<ADEN) | (1<<ADSC) | (1<<ADATE) | (1<<ADPS2) | (1<<ADPS1) | (1<<ADPS0);		// enable ADC, system clock used for ADC
  fe:	ea e7       	ldi	r30, 0x7A	; 122
 100:	f0 e0       	ldi	r31, 0x00	; 0
 102:	80 81       	ld	r24, Z
 104:	87 6e       	ori	r24, 0xE7	; 231
 106:	80 83       	st	Z, r24
		
	sei();		//enable interrupts
 108:	78 94       	sei
 10a:	ff cf       	rjmp	.-2      	; 0x10a <main+0x2e>

0000010c <__vector_4>:
}


//ISR for PC1
ISR(PCINT1_vect)
{
 10c:	1f 92       	push	r1
 10e:	0f 92       	push	r0
 110:	0f b6       	in	r0, 0x3f	; 63
 112:	0f 92       	push	r0
 114:	11 24       	eor	r1, r1
 116:	2f 93       	push	r18
 118:	8f 93       	push	r24
 11a:	9f 93       	push	r25
 11c:	af 93       	push	r26
 11e:	bf 93       	push	r27
 120:	ef 93       	push	r30
 122:	ff 93       	push	r31
	
	if(!(PINC & (1 << PINC1)))
 124:	31 99       	sbic	0x06, 1	; 6
 126:	35 c0       	rjmp	.+106    	; 0x192 <__vector_4+0x86>
	{
			if(toggle == 0)
 128:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 12c:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 130:	00 97       	sbiw	r24, 0x00	; 0
 132:	19 f4       	brne	.+6      	; 0x13a <__vector_4+0x2e>
			{
				OCR0A = 0;
 134:	17 bc       	out	0x27, r1	; 39
				PORTB &= ~(1 << 2);			//turn off OCR0A
 136:	2a 98       	cbi	0x05, 2	; 5
 138:	22 c0       	rjmp	.+68     	; 0x17e <__vector_4+0x72>
			}
			else if(toggle == 1)
 13a:	01 97       	sbiw	r24, 0x01	; 1
 13c:	01 f5       	brne	.+64     	; 0x17e <__vector_4+0x72>
			{
				PORTB |= (1 << 2);				//turn on OCR0A
 13e:	2a 9a       	sbi	0x05, 2	; 5
				ADCSRA |= (1 << ADSC);				// start conversion
 140:	ea e7       	ldi	r30, 0x7A	; 122
 142:	f0 e0       	ldi	r31, 0x00	; 0
 144:	80 81       	ld	r24, Z
 146:	80 64       	ori	r24, 0x40	; 64
 148:	80 83       	st	Z, r24
				while((ADCSRA&(1<<ADIF))==0)
 14a:	80 81       	ld	r24, Z
 14c:	84 fd       	sbrc	r24, 4
 14e:	17 c0       	rjmp	.+46     	; 0x17e <__vector_4+0x72>
				{	// wait for conversion to finish
					ADC_Val = ADC & 0x03FF;			// we only need first 10 bits
 150:	a8 e7       	ldi	r26, 0x78	; 120
 152:	b0 e0       	ldi	r27, 0x00	; 0
 154:	8d 91       	ld	r24, X+
 156:	9c 91       	ld	r25, X
 158:	11 97       	sbiw	r26, 0x01	; 1
 15a:	93 70       	andi	r25, 0x03	; 3
 15c:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <ADC_Val+0x1>
 160:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <ADC_Val>
					OCR0A = 10*ADC_Val;				// Calculate duty cycle
 164:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <ADC_Val>
 168:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <ADC_Val+0x1>
 16c:	88 0f       	add	r24, r24
 16e:	98 2f       	mov	r25, r24
 170:	99 0f       	add	r25, r25
 172:	99 0f       	add	r25, r25
 174:	89 0f       	add	r24, r25
 176:	87 bd       	out	0x27, r24	; 39
			}
			else if(toggle == 1)
			{
				PORTB |= (1 << 2);				//turn on OCR0A
				ADCSRA |= (1 << ADSC);				// start conversion
				while((ADCSRA&(1<<ADIF))==0)
 178:	80 81       	ld	r24, Z
 17a:	84 ff       	sbrs	r24, 4
 17c:	eb cf       	rjmp	.-42     	; 0x154 <__vector_4+0x48>
				{	// wait for conversion to finish
					ADC_Val = ADC & 0x03FF;			// we only need first 10 bits
					OCR0A = 10*ADC_Val;				// Calculate duty cycle
				}
			}
	toggle ^= 1;		//toggle
 17e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 182:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 186:	21 e0       	ldi	r18, 0x01	; 1
 188:	82 27       	eor	r24, r18
 18a:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 18e:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
	}
 192:	ff 91       	pop	r31
 194:	ef 91       	pop	r30
 196:	bf 91       	pop	r27
 198:	af 91       	pop	r26
 19a:	9f 91       	pop	r25
 19c:	8f 91       	pop	r24
 19e:	2f 91       	pop	r18
 1a0:	0f 90       	pop	r0
 1a2:	0f be       	out	0x3f, r0	; 63
 1a4:	0f 90       	pop	r0
 1a6:	1f 90       	pop	r1
 1a8:	18 95       	reti

000001aa <_exit>:
 1aa:	f8 94       	cli

000001ac <__stop_program>:
 1ac:	ff cf       	rjmp	.-2      	; 0x1ac <__stop_program>
