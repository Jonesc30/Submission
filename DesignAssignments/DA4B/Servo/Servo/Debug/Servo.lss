
Servo.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000001ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000178  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000002  00800100  00800100  000001ec  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000001ec  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000021c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000020  00000000  00000000  0000025c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a4f  00000000  00000000  0000027c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000969  00000000  00000000  00000ccb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000325  00000000  00000000  00001634  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000024  00000000  00000000  0000195c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004aa  00000000  00000000  00001980  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000048  00000000  00000000  00001e2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000010  00000000  00000000  00001e72  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a2 30       	cpi	r26, 0x02	; 2
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 6e 00 	call	0xdc	; 0xdc <main>
  d4:	0c 94 ba 00 	jmp	0x174	; 0x174 <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <main>:
int main(void)

{
	

	DDRB = 0xFF; //DDRB as an output
  dc:	8f ef       	ldi	r24, 0xFF	; 255
  de:	84 b9       	out	0x04, r24	; 4
	//DDRD = 0xFF;
	TCCR1B |= (1<<WGM13)  | (1<<WGM12)  | (1<<CS11)  | (1<<CS10);
  e0:	e1 e8       	ldi	r30, 0x81	; 129
  e2:	f0 e0       	ldi	r31, 0x00	; 0
  e4:	80 81       	ld	r24, Z
  e6:	8b 61       	ori	r24, 0x1B	; 27
  e8:	80 83       	st	Z, r24
	TCCR1A |= (1<<COM1A1) | (1<<COM1B1) | (1<<WGM11);
  ea:	e0 e8       	ldi	r30, 0x80	; 128
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	80 81       	ld	r24, Z
  f0:	82 6a       	ori	r24, 0xA2	; 162
  f2:	80 83       	st	Z, r24
	ICR1=4999;
  f4:	87 e8       	ldi	r24, 0x87	; 135
  f6:	93 e1       	ldi	r25, 0x13	; 19
  f8:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__DATA_REGION_ORIGIN__+0x27>
  fc:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__DATA_REGION_ORIGIN__+0x26>
	ADMUX = 0x60;
 100:	80 e6       	ldi	r24, 0x60	; 96
 102:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	ADCSRA = 0xA6;
 106:	86 ea       	ldi	r24, 0xA6	; 166
 108:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>

	while (1)
	{
		ADCSRA |= ( 1 << ADSC); //start conversion
 10c:	ea e7       	ldi	r30, 0x7A	; 122
 10e:	f0 e0       	ldi	r31, 0x00	; 0
		while((ADCSRA & (1 << ADIF))== 0);
		check = ADCH; 			//temp value
 110:	a9 e7       	ldi	r26, 0x79	; 121
 112:	b0 e0       	ldi	r27, 0x00	; 0
		
		if(check == 0) // minimum value
		{
			OCR1A = 0; //turn 0 deg
 114:	c8 e8       	ldi	r28, 0x88	; 136
 116:	d0 e0       	ldi	r29, 0x00	; 0
			_delay_ms(500);
		}
		if(check == 255) // maximum pot value
		{
			//PORTB = ( 1 << PORTB2);
			OCR1A = 535;  //turn 180
 118:	27 e1       	ldi	r18, 0x17	; 23
 11a:	32 e0       	ldi	r19, 0x02	; 2
	ADMUX = 0x60;
	ADCSRA = 0xA6;

	while (1)
	{
		ADCSRA |= ( 1 << ADSC); //start conversion
 11c:	80 81       	ld	r24, Z
 11e:	80 64       	ori	r24, 0x40	; 64
 120:	80 83       	st	Z, r24
		while((ADCSRA & (1 << ADIF))== 0);
 122:	80 81       	ld	r24, Z
 124:	84 ff       	sbrs	r24, 4
 126:	fd cf       	rjmp	.-6      	; 0x122 <main+0x46>
		check = ADCH; 			//temp value
 128:	8c 91       	ld	r24, X
 12a:	90 e0       	ldi	r25, 0x00	; 0
 12c:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <_edata+0x1>
 130:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <_edata>
		
		if(check == 0) // minimum value
 134:	89 2b       	or	r24, r25
 136:	59 f4       	brne	.+22     	; 0x14e <main+0x72>
		{
			OCR1A = 0; //turn 0 deg
 138:	19 82       	std	Y+1, r1	; 0x01
 13a:	18 82       	st	Y, r1
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 13c:	4f ef       	ldi	r20, 0xFF	; 255
 13e:	89 e6       	ldi	r24, 0x69	; 105
 140:	98 e1       	ldi	r25, 0x18	; 24
 142:	41 50       	subi	r20, 0x01	; 1
 144:	80 40       	sbci	r24, 0x00	; 0
 146:	90 40       	sbci	r25, 0x00	; 0
 148:	e1 f7       	brne	.-8      	; 0x142 <main+0x66>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <main+0x70>
 14c:	00 00       	nop
			_delay_ms(500);
		}
		if(check == 255) // maximum pot value
 14e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 152:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 156:	8f 3f       	cpi	r24, 0xFF	; 255
 158:	91 05       	cpc	r25, r1
 15a:	01 f7       	brne	.-64     	; 0x11c <main+0x40>
		{
			//PORTB = ( 1 << PORTB2);
			OCR1A = 535;  //turn 180
 15c:	39 83       	std	Y+1, r19	; 0x01
 15e:	28 83       	st	Y, r18
 160:	4f ef       	ldi	r20, 0xFF	; 255
 162:	89 e6       	ldi	r24, 0x69	; 105
 164:	98 e1       	ldi	r25, 0x18	; 24
 166:	41 50       	subi	r20, 0x01	; 1
 168:	80 40       	sbci	r24, 0x00	; 0
 16a:	90 40       	sbci	r25, 0x00	; 0
 16c:	e1 f7       	brne	.-8      	; 0x166 <main+0x8a>
 16e:	00 c0       	rjmp	.+0      	; 0x170 <main+0x94>
 170:	00 00       	nop
 172:	d4 cf       	rjmp	.-88     	; 0x11c <main+0x40>

00000174 <_exit>:
 174:	f8 94       	cli

00000176 <__stop_program>:
 176:	ff cf       	rjmp	.-2      	; 0x176 <__stop_program>
