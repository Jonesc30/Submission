
Stepper.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  000003d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000035e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  00800100  00800100  000003d2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000003d2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000404  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  00000444  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000009cf  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000901  00000000  00000000  00000e3b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000487  00000000  00000000  0000173c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000034  00000000  00000000  00001bc4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000470  00000000  00000000  00001bf8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000018  00000000  00000000  00002068  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__ctors_end>
   4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
   c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  10:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  14:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  18:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  1c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  20:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  24:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  28:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  2c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  30:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  34:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  38:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  3c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  40:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  44:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  48:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  4c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  50:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  54:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  58:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  5c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  60:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  64:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  68:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  6c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  70:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  74:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  78:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  7c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  80:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  84:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  88:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  8c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  90:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  94:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  98:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  9c:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a4:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  a8:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  ac:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>
  b0:	0c 94 6c 00 	jmp	0xd8	; 0xd8 <__bad_interrupt>

000000b4 <__ctors_end>:
  b4:	11 24       	eor	r1, r1
  b6:	1f be       	out	0x3f, r1	; 63
  b8:	cf ef       	ldi	r28, 0xFF	; 255
  ba:	d8 e0       	ldi	r29, 0x08	; 8
  bc:	de bf       	out	0x3e, r29	; 62
  be:	cd bf       	out	0x3d, r28	; 61

000000c0 <__do_clear_bss>:
  c0:	21 e0       	ldi	r18, 0x01	; 1
  c2:	a0 e0       	ldi	r26, 0x00	; 0
  c4:	b1 e0       	ldi	r27, 0x01	; 1
  c6:	01 c0       	rjmp	.+2      	; 0xca <.do_clear_bss_start>

000000c8 <.do_clear_bss_loop>:
  c8:	1d 92       	st	X+, r1

000000ca <.do_clear_bss_start>:
  ca:	a4 30       	cpi	r26, 0x04	; 4
  cc:	b2 07       	cpc	r27, r18
  ce:	e1 f7       	brne	.-8      	; 0xc8 <.do_clear_bss_loop>
  d0:	0e 94 75 00 	call	0xea	; 0xea <main>
  d4:	0c 94 ad 01 	jmp	0x35a	; 0x35a <_exit>

000000d8 <__bad_interrupt>:
  d8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000dc <adc_int>:
		}
	}
}

void adc_int(void){
	ADMUX = (0<<REFS1)|	//	Reference Selection Bits
  dc:	80 e4       	ldi	r24, 0x40	; 64
  de:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__DATA_REGION_ORIGIN__+0x1c>
	(0<<MUX3) |
	(0<<MUX2) |	//	ANalogChannel Selection	Bits
	(0<<MUX1) |	//	ADC0 (PC0)
	(0<<MUX0);

	ADCSRA = (1<<ADEN)|	//	ADC	Enable
  e2:	8f ee       	ldi	r24, 0xEF	; 239
  e4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
  e8:	08 95       	ret

000000ea <main>:
volatile unsigned int speed; // Value of delay AKA speed
volatile int stop = 0; 		 // Variable used to stop operation

int main(void)
{
	DDRB = 0x0F;        // Set PD0 - PD3 as outputs for stepper motor
  ea:	8f e0       	ldi	r24, 0x0F	; 15
  ec:	84 b9       	out	0x04, r24	; 4
	adc_int();	      	// Initialize ADC
  ee:	0e 94 6e 00 	call	0xdc	; 0xdc <adc_int>
	TCCR1B = 0x0D;      // Set CTC mode and 1024 prescaler
  f2:	8d e0       	ldi	r24, 0x0D	; 13
  f4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
	while(1){
		while((ADCSRA&(1<<ADIF))==0); // wait for ADC conversion
  f8:	ea e7       	ldi	r30, 0x7A	; 122
  fa:	f0 e0       	ldi	r31, 0x00	; 0
		
		if (ADC <= 4)    {stop = 0; speed = 1;}
  fc:	a8 e7       	ldi	r26, 0x78	; 120
  fe:	b0 e0       	ldi	r27, 0x00	; 0
		if (ADC <= 425)  {stop = 0; speed = 6;}
		if (ADC <= 510)  {stop = 0; speed = 7;}
		if (ADC <= 595)  {stop = 0; speed = 8;}
		if (ADC <= 680)  {stop = 0; speed = 9;}
		if (ADC <= 765)  {stop = 0; speed = 10;}
		if (ADC <= 850)  {stop = 0; speed = 11;}
 100:	0f 2e       	mov	r0, r31
 102:	fb e0       	ldi	r31, 0x0B	; 11
 104:	cf 2e       	mov	r12, r31
 106:	d1 2c       	mov	r13, r1
 108:	f0 2d       	mov	r31, r0
	adc_int();	      	// Initialize ADC
	TCCR1B = 0x0D;      // Set CTC mode and 1024 prescaler
	while(1){
		while((ADCSRA&(1<<ADIF))==0); // wait for ADC conversion
		
		if (ADC <= 4)    {stop = 0; speed = 1;}
 10a:	41 e0       	ldi	r20, 0x01	; 1
 10c:	50 e0       	ldi	r21, 0x00	; 0
		if (ADC <= 85)   {stop = 0; speed = 2;}
 10e:	68 94       	set
 110:	ee 24       	eor	r14, r14
 112:	e1 f8       	bld	r14, 1
 114:	f1 2c       	mov	r15, r1
		if (ADC <= 170)  {stop = 0; speed = 3;}
 116:	0f 2e       	mov	r0, r31
 118:	f3 e0       	ldi	r31, 0x03	; 3
 11a:	af 2e       	mov	r10, r31
 11c:	b1 2c       	mov	r11, r1
 11e:	f0 2d       	mov	r31, r0
		if (ADC <= 255)  {stop = 0; speed = 4;}
 120:	68 94       	set
 122:	88 24       	eor	r8, r8
 124:	82 f8       	bld	r8, 2
 126:	91 2c       	mov	r9, r1
		if (ADC <= 340)  {stop = 0; speed = 5;}
 128:	0f 2e       	mov	r0, r31
 12a:	f5 e0       	ldi	r31, 0x05	; 5
 12c:	6f 2e       	mov	r6, r31
 12e:	71 2c       	mov	r7, r1
 130:	f0 2d       	mov	r31, r0
		if (ADC <= 425)  {stop = 0; speed = 6;}
 132:	0f 2e       	mov	r0, r31
 134:	f6 e0       	ldi	r31, 0x06	; 6
 136:	4f 2e       	mov	r4, r31
 138:	51 2c       	mov	r5, r1
 13a:	f0 2d       	mov	r31, r0
		if (ADC <= 510)  {stop = 0; speed = 7;}
 13c:	0f 2e       	mov	r0, r31
 13e:	f7 e0       	ldi	r31, 0x07	; 7
 140:	2f 2e       	mov	r2, r31
 142:	31 2c       	mov	r3, r1
 144:	f0 2d       	mov	r31, r0
		if (ADC <= 595)  {stop = 0; speed = 8;}
		if (ADC <= 680)  {stop = 0; speed = 9;}
		if (ADC <= 765)  {stop = 0; speed = 10;}
		if (ADC <= 850)  {stop = 0; speed = 11;}
		if (ADC <= 935)  {stop = 0; speed = 12;}
		if (ADC <= 1015) {stop = 0; speed = 13;}
 146:	0d e0       	ldi	r16, 0x0D	; 13
 148:	10 e0       	ldi	r17, 0x00	; 0
		if (ADC >= 1016)  {stop = 1;}

		OCR1A = speed;	// set OCR1A to the determined speed
 14a:	28 e8       	ldi	r18, 0x88	; 136
 14c:	30 e0       	ldi	r19, 0x00	; 0
{
	DDRB = 0x0F;        // Set PD0 - PD3 as outputs for stepper motor
	adc_int();	      	// Initialize ADC
	TCCR1B = 0x0D;      // Set CTC mode and 1024 prescaler
	while(1){
		while((ADCSRA&(1<<ADIF))==0); // wait for ADC conversion
 14e:	80 81       	ld	r24, Z
 150:	84 ff       	sbrs	r24, 4
 152:	fd cf       	rjmp	.-6      	; 0x14e <main+0x64>
		
		if (ADC <= 4)    {stop = 0; speed = 1;}
 154:	8d 91       	ld	r24, X+
 156:	9c 91       	ld	r25, X
 158:	11 97       	sbiw	r26, 0x01	; 1
 15a:	05 97       	sbiw	r24, 0x05	; 5
 15c:	40 f4       	brcc	.+16     	; 0x16e <main+0x84>
 15e:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 162:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 166:	50 93 03 01 	sts	0x0103, r21	; 0x800103 <speed+0x1>
 16a:	40 93 02 01 	sts	0x0102, r20	; 0x800102 <speed>
		if (ADC <= 85)   {stop = 0; speed = 2;}
 16e:	8d 91       	ld	r24, X+
 170:	9c 91       	ld	r25, X
 172:	11 97       	sbiw	r26, 0x01	; 1
 174:	86 35       	cpi	r24, 0x56	; 86
 176:	91 05       	cpc	r25, r1
 178:	40 f4       	brcc	.+16     	; 0x18a <main+0xa0>
 17a:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 17e:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 182:	f0 92 03 01 	sts	0x0103, r15	; 0x800103 <speed+0x1>
 186:	e0 92 02 01 	sts	0x0102, r14	; 0x800102 <speed>
		if (ADC <= 170)  {stop = 0; speed = 3;}
 18a:	8d 91       	ld	r24, X+
 18c:	9c 91       	ld	r25, X
 18e:	11 97       	sbiw	r26, 0x01	; 1
 190:	8b 3a       	cpi	r24, 0xAB	; 171
 192:	91 05       	cpc	r25, r1
 194:	40 f4       	brcc	.+16     	; 0x1a6 <main+0xbc>
 196:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 19a:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 19e:	b0 92 03 01 	sts	0x0103, r11	; 0x800103 <speed+0x1>
 1a2:	a0 92 02 01 	sts	0x0102, r10	; 0x800102 <speed>
		if (ADC <= 255)  {stop = 0; speed = 4;}
 1a6:	8d 91       	ld	r24, X+
 1a8:	9c 91       	ld	r25, X
 1aa:	11 97       	sbiw	r26, 0x01	; 1
 1ac:	8f 3f       	cpi	r24, 0xFF	; 255
 1ae:	91 05       	cpc	r25, r1
 1b0:	09 f0       	breq	.+2      	; 0x1b4 <main+0xca>
 1b2:	40 f4       	brcc	.+16     	; 0x1c4 <main+0xda>
 1b4:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 1b8:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 1bc:	90 92 03 01 	sts	0x0103, r9	; 0x800103 <speed+0x1>
 1c0:	80 92 02 01 	sts	0x0102, r8	; 0x800102 <speed>
		if (ADC <= 340)  {stop = 0; speed = 5;}
 1c4:	8d 91       	ld	r24, X+
 1c6:	9c 91       	ld	r25, X
 1c8:	11 97       	sbiw	r26, 0x01	; 1
 1ca:	85 35       	cpi	r24, 0x55	; 85
 1cc:	91 40       	sbci	r25, 0x01	; 1
 1ce:	40 f4       	brcc	.+16     	; 0x1e0 <main+0xf6>
 1d0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 1d4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 1d8:	70 92 03 01 	sts	0x0103, r7	; 0x800103 <speed+0x1>
 1dc:	60 92 02 01 	sts	0x0102, r6	; 0x800102 <speed>
		if (ADC <= 425)  {stop = 0; speed = 6;}
 1e0:	8d 91       	ld	r24, X+
 1e2:	9c 91       	ld	r25, X
 1e4:	11 97       	sbiw	r26, 0x01	; 1
 1e6:	8a 3a       	cpi	r24, 0xAA	; 170
 1e8:	91 40       	sbci	r25, 0x01	; 1
 1ea:	40 f4       	brcc	.+16     	; 0x1fc <main+0x112>
 1ec:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 1f0:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 1f4:	50 92 03 01 	sts	0x0103, r5	; 0x800103 <speed+0x1>
 1f8:	40 92 02 01 	sts	0x0102, r4	; 0x800102 <speed>
		if (ADC <= 510)  {stop = 0; speed = 7;}
 1fc:	8d 91       	ld	r24, X+
 1fe:	9c 91       	ld	r25, X
 200:	11 97       	sbiw	r26, 0x01	; 1
 202:	8f 3f       	cpi	r24, 0xFF	; 255
 204:	91 40       	sbci	r25, 0x01	; 1
 206:	40 f4       	brcc	.+16     	; 0x218 <main+0x12e>
 208:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 20c:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 210:	30 92 03 01 	sts	0x0103, r3	; 0x800103 <speed+0x1>
 214:	20 92 02 01 	sts	0x0102, r2	; 0x800102 <speed>
		if (ADC <= 595)  {stop = 0; speed = 8;}
 218:	8d 91       	ld	r24, X+
 21a:	9c 91       	ld	r25, X
 21c:	11 97       	sbiw	r26, 0x01	; 1
 21e:	84 35       	cpi	r24, 0x54	; 84
 220:	92 40       	sbci	r25, 0x02	; 2
 222:	50 f4       	brcc	.+20     	; 0x238 <main+0x14e>
 224:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 228:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 22c:	88 e0       	ldi	r24, 0x08	; 8
 22e:	90 e0       	ldi	r25, 0x00	; 0
 230:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <speed+0x1>
 234:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <speed>
		if (ADC <= 680)  {stop = 0; speed = 9;}
 238:	8d 91       	ld	r24, X+
 23a:	9c 91       	ld	r25, X
 23c:	11 97       	sbiw	r26, 0x01	; 1
 23e:	89 3a       	cpi	r24, 0xA9	; 169
 240:	92 40       	sbci	r25, 0x02	; 2
 242:	50 f4       	brcc	.+20     	; 0x258 <main+0x16e>
 244:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 248:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 24c:	89 e0       	ldi	r24, 0x09	; 9
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <speed+0x1>
 254:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <speed>
		if (ADC <= 765)  {stop = 0; speed = 10;}
 258:	8d 91       	ld	r24, X+
 25a:	9c 91       	ld	r25, X
 25c:	11 97       	sbiw	r26, 0x01	; 1
 25e:	8e 3f       	cpi	r24, 0xFE	; 254
 260:	92 40       	sbci	r25, 0x02	; 2
 262:	50 f4       	brcc	.+20     	; 0x278 <main+0x18e>
 264:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 268:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 26c:	8a e0       	ldi	r24, 0x0A	; 10
 26e:	90 e0       	ldi	r25, 0x00	; 0
 270:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <speed+0x1>
 274:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <speed>
		if (ADC <= 850)  {stop = 0; speed = 11;}
 278:	8d 91       	ld	r24, X+
 27a:	9c 91       	ld	r25, X
 27c:	11 97       	sbiw	r26, 0x01	; 1
 27e:	83 35       	cpi	r24, 0x53	; 83
 280:	93 40       	sbci	r25, 0x03	; 3
 282:	40 f4       	brcc	.+16     	; 0x294 <main+0x1aa>
 284:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 288:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 28c:	d0 92 03 01 	sts	0x0103, r13	; 0x800103 <speed+0x1>
 290:	c0 92 02 01 	sts	0x0102, r12	; 0x800102 <speed>
		if (ADC <= 935)  {stop = 0; speed = 12;}
 294:	8d 91       	ld	r24, X+
 296:	9c 91       	ld	r25, X
 298:	11 97       	sbiw	r26, 0x01	; 1
 29a:	88 3a       	cpi	r24, 0xA8	; 168
 29c:	93 40       	sbci	r25, 0x03	; 3
 29e:	50 f4       	brcc	.+20     	; 0x2b4 <main+0x1ca>
 2a0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 2a4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 2a8:	8c e0       	ldi	r24, 0x0C	; 12
 2aa:	90 e0       	ldi	r25, 0x00	; 0
 2ac:	90 93 03 01 	sts	0x0103, r25	; 0x800103 <speed+0x1>
 2b0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <speed>
		if (ADC <= 1015) {stop = 0; speed = 13;}
 2b4:	8d 91       	ld	r24, X+
 2b6:	9c 91       	ld	r25, X
 2b8:	11 97       	sbiw	r26, 0x01	; 1
 2ba:	88 3f       	cpi	r24, 0xF8	; 248
 2bc:	93 40       	sbci	r25, 0x03	; 3
 2be:	40 f4       	brcc	.+16     	; 0x2d0 <main+0x1e6>
 2c0:	10 92 01 01 	sts	0x0101, r1	; 0x800101 <_edata+0x1>
 2c4:	10 92 00 01 	sts	0x0100, r1	; 0x800100 <_edata>
 2c8:	10 93 03 01 	sts	0x0103, r17	; 0x800103 <speed+0x1>
 2cc:	00 93 02 01 	sts	0x0102, r16	; 0x800102 <speed>
		if (ADC >= 1016)  {stop = 1;}
 2d0:	8d 91       	ld	r24, X+
 2d2:	9c 91       	ld	r25, X
 2d4:	11 97       	sbiw	r26, 0x01	; 1
 2d6:	88 3f       	cpi	r24, 0xF8	; 248
 2d8:	93 40       	sbci	r25, 0x03	; 3
 2da:	20 f0       	brcs	.+8      	; 0x2e4 <main+0x1fa>
 2dc:	50 93 01 01 	sts	0x0101, r21	; 0x800101 <_edata+0x1>
 2e0:	40 93 00 01 	sts	0x0100, r20	; 0x800100 <_edata>

		OCR1A = speed;	// set OCR1A to the determined speed
 2e4:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <speed>
 2e8:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <speed+0x1>
 2ec:	e9 01       	movw	r28, r18
 2ee:	99 83       	std	Y+1, r25	; 0x01
 2f0:	88 83       	st	Y, r24
		TCNT1 = 0x00;	// reset the clock
 2f2:	c4 e8       	ldi	r28, 0x84	; 132
 2f4:	d0 e0       	ldi	r29, 0x00	; 0
 2f6:	19 82       	std	Y+1, r1	; 0x01
 2f8:	18 82       	st	Y, r1
		if(stop == 0){
 2fa:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <_edata>
 2fe:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <_edata+0x1>
 302:	89 2b       	or	r24, r25
 304:	09 f0       	breq	.+2      	; 0x308 <main+0x21e>
 306:	23 cf       	rjmp	.-442    	; 0x14e <main+0x64>
			// If the ADC value is not at its MAX value then step with desired delay
			while((TIFR1 & 0x2) != 0x2);
 308:	b1 9b       	sbis	0x16, 1	; 22
 30a:	fe cf       	rjmp	.-4      	; 0x308 <main+0x21e>
			PORTB = 0x09;
 30c:	89 e0       	ldi	r24, 0x09	; 9
 30e:	85 b9       	out	0x05, r24	; 5
			TIFR1 |= (1<<OCF1A);
 310:	b1 9a       	sbi	0x16, 1	; 22
			while((TIFR1 & 0x2) != 0x2);
 312:	b1 9b       	sbis	0x16, 1	; 22
 314:	fe cf       	rjmp	.-4      	; 0x312 <main+0x228>
			PORTB = 0x08;
 316:	88 e0       	ldi	r24, 0x08	; 8
 318:	85 b9       	out	0x05, r24	; 5
			TIFR1 |= (1<<OCF1A);
 31a:	b1 9a       	sbi	0x16, 1	; 22
			while((TIFR1 & 0x2) != 0x2);
 31c:	b1 9b       	sbis	0x16, 1	; 22
 31e:	fe cf       	rjmp	.-4      	; 0x31c <main+0x232>
			PORTB = 0X0C;
 320:	8c e0       	ldi	r24, 0x0C	; 12
 322:	85 b9       	out	0x05, r24	; 5
			TIFR1 |= (1<<OCF1A);
 324:	b1 9a       	sbi	0x16, 1	; 22
			while((TIFR1 & 0x2) != 0x2);
 326:	b1 9b       	sbis	0x16, 1	; 22
 328:	fe cf       	rjmp	.-4      	; 0x326 <main+0x23c>
			PORTB = 0X04;
 32a:	84 e0       	ldi	r24, 0x04	; 4
 32c:	85 b9       	out	0x05, r24	; 5
			TIFR1 |= (1<<OCF1A);
 32e:	b1 9a       	sbi	0x16, 1	; 22
			while((TIFR1 & 0x2) != 0x2);
 330:	b1 9b       	sbis	0x16, 1	; 22
 332:	fe cf       	rjmp	.-4      	; 0x330 <main+0x246>
			PORTB = 0x06;
 334:	86 e0       	ldi	r24, 0x06	; 6
 336:	85 b9       	out	0x05, r24	; 5
			TIFR1 |= (1<<OCF1A);
 338:	b1 9a       	sbi	0x16, 1	; 22
			while((TIFR1 & 0x2) != 0x2);
 33a:	b1 9b       	sbis	0x16, 1	; 22
 33c:	fe cf       	rjmp	.-4      	; 0x33a <main+0x250>
			PORTB = 0x02 ;
 33e:	82 e0       	ldi	r24, 0x02	; 2
 340:	85 b9       	out	0x05, r24	; 5
			TIFR1 |= (1<<OCF1A);
 342:	b1 9a       	sbi	0x16, 1	; 22
			while((TIFR1 & 0x2) != 0x2);
 344:	b1 9b       	sbis	0x16, 1	; 22
 346:	fe cf       	rjmp	.-4      	; 0x344 <main+0x25a>
			PORTB = 0X03;
 348:	83 e0       	ldi	r24, 0x03	; 3
 34a:	85 b9       	out	0x05, r24	; 5
			TIFR1 |= (1<<OCF1A);
 34c:	b1 9a       	sbi	0x16, 1	; 22
			while((TIFR1 & 0x2) != 0x2);
 34e:	b1 9b       	sbis	0x16, 1	; 22
 350:	fe cf       	rjmp	.-4      	; 0x34e <main+0x264>
			PORTB = 0X01;
 352:	81 e0       	ldi	r24, 0x01	; 1
 354:	85 b9       	out	0x05, r24	; 5
			TIFR1 |= (1<<OCF1A);
 356:	b1 9a       	sbi	0x16, 1	; 22
 358:	f6 ce       	rjmp	.-532    	; 0x146 <main+0x5c>

0000035a <_exit>:
 35a:	f8 94       	cli

0000035c <__stop_program>:
 35c:	ff cf       	rjmp	.-2      	; 0x35c <__stop_program>
